import{_ as n,o as s,c as a,b as t}from"./app-ZJlk8RDi.js";const e={},p=t(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>CSS 是每一个前端工程师都绕不过去的坎，熟练运用 CSS 后，实现同样一种效果我们可以有很多种写法，但由于兼容问题，通常简洁的写法并不能实现全平台统一效果，复杂的写法对性能又不太友好，导致我们在编写 CSS 过程中有很多需要注意的点，要踩很多的坑，因此用一个笔记来集中记录一下方法。</p></div><p>（为方便表达代码，在此定义 html 结构为：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的 css 样式为：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行内元素 html 结构改为：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Duang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>css 样式改为：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下无特殊说明的话结构都使用这个。</p><h2 id="水平居中" tabindex="-1"><a class="header-anchor" href="#水平居中"><span>水平居中</span></a></h2><h3 id="_1-行内元素" tabindex="-1"><a class="header-anchor" href="#_1-行内元素"><span>1. 行内元素</span></a></h3><p>只需要把行内元素包裹在一个属性 display 为 block 的父层元素中，并且把父层元素添加 text-align:center 即可：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200713145226.png" alt="text-align"></p><h3 id="_2-块状元素" tabindex="-1"><a class="header-anchor" href="#_2-块状元素"><span>2. 块状元素</span></a></h3><p>对于块状元素来说，我们需要将它的左右外边距（即，margin-left，margin-right）设置为 auto，即可实现块状元素的居中，如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200713144819.png" alt="margin-0-auto"></p><h2 id="垂直居中" tabindex="-1"><a class="header-anchor" href="#垂直居中"><span>垂直居中</span></a></h2><h3 id="_1-行内元素单行居中" tabindex="-1"><a class="header-anchor" href="#_1-行内元素单行居中"><span>1. 行内元素单行居中</span></a></h3><p>对于单行行内元素来说，垂直居中就是设定父元素行高等于其块状元素高度。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165311.png" alt="line-height"></p><h3 id="_2-行内元素多行居中" tabindex="-1"><a class="header-anchor" href="#_2-行内元素多行居中"><span>2. 行内元素多行居中</span></a></h3><p>这个使用的手段是比较复杂的，我这里组合使用 display:table-cell 和 vertical-align:middle 属性来定义需要居中的元素的父容器元素，但是缺点有很多，比如这里因为格式变成了 table 类型，宽高必须设置成定值才行，希望有大佬提出更好的解决方法。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165348.png" alt="table-cell"></p><h2 id="水平垂直居中" tabindex="-1"><a class="header-anchor" href="#水平垂直居中"><span>水平垂直居中</span></a></h2><p>这里的方法同样适用于仅水平或者仅垂直居中。取与之相关的居中代码即可。</p><h3 id="_1-最通用且实用的首选方法" tabindex="-1"><a class="header-anchor" href="#_1-最通用且实用的首选方法"><span>1. 最通用且实用的首选方法</span></a></h3><p>在不知道自己高度和父容器高度的情况下，给父元素设置相对定位，子元素绝对定位，然后按照向右向下偏移的办法移到中心位置即可。</p><p>这里绝对定位的好处是无论父元素的实际高度以及子元素的个数，都能够完成覆盖型的居中显示。</p><p>代码示例如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（注：其实这里可以不用知道父子元素高度，为了方便显示才使用）</p><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165411.png" alt="absolute-top-left"></p><h3 id="_2-已知父元素的高度-并且子元素有且只有一个" tabindex="-1"><a class="header-anchor" href="#_2-已知父元素的高度-并且子元素有且只有一个"><span>2. 已知父元素的高度，并且子元素有且只有一个</span></a></h3><p>如果已知父元素的高度，并且子元素有且只有一个的话，完全可以只对子元素使用相对定位完成同样的效果：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.target</span> <span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165411.png" alt="relative-top-left"></p><h3 id="_3-多个子元素自适应的同时水平垂直居中" tabindex="-1"><a class="header-anchor" href="#_3-多个子元素自适应的同时水平垂直居中"><span>3. 多个子元素自适应的同时水平垂直居中</span></a></h3><p>如果想实现多个子元素自适应的同时水平垂直居中，同时浏览器兼容性也支持的不错的话，推荐使用简单方便的 flex 布局。仅仅只设定父元素 display 属性为 flex 即可。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165507.png" alt="flex"></p><h3 id="_4-table-cell-方式" tabindex="-1"><a class="header-anchor" href="#_4-table-cell-方式"><span>4. table-cell 方式</span></a></h3><p>附加一个兼容性更好但是不太推荐的方法，就是由刚才多行行内元素垂直居中衍生出来的，再加一行行内水平居中的代码就能解决了。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/realDuang/blog-storage/images/20200715165534.png" alt="table-cell"></p><p>不太推荐的原因同垂直居中时说的。</p><p>而且想实现这个效果还不如直接用一个块状元素包裹这些行内元素，然后再用块状元素的水平垂直居中即可，当然显示方式可能会有少许的不同，自己斟酌使用吧~</p>`,51),l=[p];function c(i,o){return s(),a("div",null,l)}const r=n(e,[["render",c],["__file","CSS dechuizhijizhongfangfa.html.vue"]]),d=JSON.parse('{"path":"/blogs/qianduanjichu/CSS dechuizhijizhongfangfa.html","title":"CSS 的垂直居中方法","lang":"en-US","frontmatter":{"title":"CSS 的垂直居中方法","date":"2018/03/14 16:51:25","categories":["前端基础"],"tags":["CSS"]},"headers":[{"level":2,"title":"水平居中","slug":"水平居中","link":"#水平居中","children":[{"level":3,"title":"1. 行内元素","slug":"_1-行内元素","link":"#_1-行内元素","children":[]},{"level":3,"title":"2. 块状元素","slug":"_2-块状元素","link":"#_2-块状元素","children":[]}]},{"level":2,"title":"垂直居中","slug":"垂直居中","link":"#垂直居中","children":[{"level":3,"title":"1. 行内元素单行居中","slug":"_1-行内元素单行居中","link":"#_1-行内元素单行居中","children":[]},{"level":3,"title":"2. 行内元素多行居中","slug":"_2-行内元素多行居中","link":"#_2-行内元素多行居中","children":[]}]},{"level":2,"title":"水平垂直居中","slug":"水平垂直居中","link":"#水平垂直居中","children":[{"level":3,"title":"1. 最通用且实用的首选方法","slug":"_1-最通用且实用的首选方法","link":"#_1-最通用且实用的首选方法","children":[]},{"level":3,"title":"2. 已知父元素的高度，并且子元素有且只有一个","slug":"_2-已知父元素的高度-并且子元素有且只有一个","link":"#_2-已知父元素的高度-并且子元素有且只有一个","children":[]},{"level":3,"title":"3. 多个子元素自适应的同时水平垂直居中","slug":"_3-多个子元素自适应的同时水平垂直居中","link":"#_3-多个子元素自适应的同时水平垂直居中","children":[]},{"level":3,"title":"4. table-cell 方式","slug":"_4-table-cell-方式","link":"#_4-table-cell-方式","children":[]}]}],"git":{"createdTime":1716285190000,"updatedTime":1716285190000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/前端基础/CSS 的垂直居中方法.md"}');export{r as comp,d as data};
