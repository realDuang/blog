(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{570:function(e,t,a){"use strict";a.r(t);var r=a(11),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[e._v("上一节说到，reducer 是一个纯函数。那么纯函数具体的定义是什么呢？阮一峰老师是这样说的：")]),e._v(" "),a("p",[e._v("纯函数是函数式编程的概念，必须遵守以下一些约束。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[e._v("不得改写参数")])]),e._v(" "),a("li",[a("p",[e._v("不能调用系统 I/O 的 API")])]),e._v(" "),a("li",[a("p",[e._v("不能调用"),a("code",[e._v("Date.now()")]),e._v("或者"),a("code",[e._v("Math.random()")]),e._v("等不纯的方法，因为每次会得到不一样的结果")])])])])]),e._v(" "),a("p",[e._v("我们知道，处理业务逻辑的过程中不可避免的要用到异步操作，而 reducer 是一个纯函数，无法完成这项使命，那怎么办呢？")]),e._v(" "),a("p",[e._v("这又是一个非常复杂的故事了。")]),e._v(" "),a("p",[e._v("首先我想到的是，"),a("code",[e._v("action")]),e._v("不是由"),a("code",[e._v("actionCreator")]),e._v("函数生成的吗？我们可以在"),a("code",[e._v("actionCreator")]),e._v("函数里面进行异步操作，返回不同的"),a("code",[e._v("payload")]),e._v("，问题不就解决了吗？但是问题又来了，之前说过，reducer 不能接收一个函数作为参数传入啊。")]),e._v(" "),a("p",[e._v("事实上，著名的中间件"),a("code",[e._v("redux-thunk")]),e._v("就是处理这样的问题的，使得"),a("code",[e._v("actionCreator")]),e._v("方法能接受一个返回 action 对象的函数作为返回值。")]),e._v(" "),a("p",[e._v("那么这里就引入了一个中间件的概念。中间件实际上就是用来修饰 reducer 操作，增强 reducer 函数功能的。")]),e._v(" "),a("p",[e._v("我们来看看 redux 中间件是怎么运作的：")]),e._v(" "),a("blockquote",[a("p",[e._v("若 reducer 涉及到异步操作，则必须使用中间件。创建 store 时使用"),a("code",[e._v("applyMiddleware(middleware)(createStore)(reducer, initialState)")]),e._v("来创建 store")])]),e._v(" "),a("p",[e._v("这看起来实在是太绕了……")]),e._v(" "),a("p",[e._v("实际上，我们可以将"),a("code",[e._v("applyMiddleware(middleware)")]),e._v("看成一个修饰器，用来修饰"),a("code",[e._v("createStore(reducer, initialState)")]),e._v("函数。是不是看明白了一点？")]),e._v(" "),a("p",[e._v("因此，这个函数我们也能写成这样：")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" store "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("createStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  reducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  initial_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("applyMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("将"),a("code",[e._v("applyMiddleware(middleware)")]),e._v("作为"),a("code",[e._v("createStore")]),e._v("的最后一个参数传入，现在是不是好理解多了？")]),e._v(" "),a("p",[e._v("另外，中间件的传入是有顺序讲究的，涉及到执行顺序的问题，通过 redux 中"),a("code",[e._v("applyMiddleware")]),e._v("的源码中可以看出，"),a("code",[e._v("applyMiddleware(middleware1，middleware2，middleware3)")]),e._v("的实际执行顺序为"),a("code",[e._v("store.dispatch")]),e._v("=>"),a("code",[e._v("middleware1")]),e._v("=>"),a("code",[e._v("middleware2")]),e._v("=>"),a("code",[e._v("middleware3")]),e._v("。这一点一定要非常小心，比如著名的 redux-logger 中间件是用来记录操作日志的，一定要放在最后一个参数中以便第一时间执行。")]),e._v(" "),a("p",[e._v("redux 中间件的各种组件可谓是博大精深，有各种各样好用的中间件让人去探索学习，本文着重讲解 redux 本身的原理，对中间件插件就不多做介绍了。")])])}),[],!1,null,null,null);t.default=s.exports}}]);