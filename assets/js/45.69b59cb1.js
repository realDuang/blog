(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{591:function(e,o,r){"use strict";r.r(o);var v=r(11),t=Object(v.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"}),r("p",[e._v("下一代 IDE 的形态究竟是什么呢？VS Code For Web 试图回答这个问题。")])]),e._v(" "),r("h2",{attrs:{id:"背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),r("p",[e._v("众所周知，VS Code 是当前工业界最优秀的代码编辑器之一。它由《设计模式》的作者 Erich Gamma 领导开发，因此，它的设计架构在很多地方十分精妙，近些年已经成为了各家竞相模仿学习的对象。")]),e._v(" "),r("p",[e._v("尽管 VSCode 作为桌面端应用十分优秀，但由于它基于 Electron，相当于在 Chromium 外套了一层壳，使得它的打包体积非常大，且无法直接安装在云端环境中，这就导致了它的使用场景非常有限。")]),e._v(" "),r("p",[e._v("2019 年，微软在 PyCon 2019 大会上发布了 "),r("code",[e._v("VSCode Remote")]),e._v(" 扩展，支持了远程开发，这个扩展的出现，使得 VSCode 成为了一款真正的跨平台 IDE，不再局限于本地开发，可以通过 SSH 连接到远程服务器，然后在远程服务器上开发。")]),e._v(" "),r("p",[e._v("2020 年，"),r("code",[e._v("Github Codespaces")]),e._v(" 又将 Web IDE 的进展向前迈进了一步，它允许用户访问 Github 上托管的所有项目来直接进行编辑与提交，而无需自己搭建服务器，实现了一个全托管的远程开发解决方案。但微软当时并未将其 Server 部分开源，由 Github 集中运营。")]),e._v(" "),r("p",[e._v("而在最近的 2022 年 7 月，微软公开并发布了 "),r("code",[e._v("private preview")]),e._v(" 版本的 "),r("code",[e._v("VS Code Server")]),e._v("。这是一个"),r("code",[e._v("可私有化的")]),e._v("，可以在"),r("code",[e._v("远程")]),e._v("开发机器上运行的独立服务端。与 "),r("code",[e._v("Github Codespaces")]),e._v(" 相同，它允许用户直接通过 URL，在浏览器中安全地链接到远程开发机，且同时支持了 "),r("code",[e._v("HTTP")]),e._v(" 与 "),r("code",[e._v("Web Socket")]),e._v(" 协议。在此过程中不需要进行任何前期的 SSH 或 HTTPS 设置。")]),e._v(" "),r("p",[e._v("官方基于此制作了基于 "),r("code",[e._v("VS Code Server")]),e._v(" 的 "),r("code",[e._v("Web IDE")]),e._v("，可以直接通过浏览器访问 "),r("a",{attrs:{href:"https://vscode.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://vscode.dev/"),r("OutboundLink")],1),e._v(" 进行体验。可以预见，这就是下一代 IDE 的形态，"),r("code",[e._v("Serverless, and Run Anywhere")]),e._v("。")]),e._v(" "),r("p",[e._v("注：本文基于 VSCode v1.71 版本。")]),e._v(" "),r("h2",{attrs:{id:"vs-code-for-web-代码架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-for-web-代码架构"}},[e._v("#")]),e._v(" VS Code For Web 代码架构")]),e._v(" "),r("p",[e._v("注意，在了解 "),r("code",[e._v("VS Code For Web")]),e._v(" 的架构之前，我们最好对 VS Code 的组织架构有一定的了解。（详细内容可自行参考 "),r("a",{attrs:{href:"https://github.com/microsoft/vscode/wiki/Source-Code-Organization",target:"_blank",rel:"noopener noreferrer"}},[e._v("VSCode 的官方文档"),r("OutboundLink")],1),e._v("。）")]),e._v(" "),r("p",[e._v("从设计上说，VS Code 是一个多进程架构的应用程序，它主要由客户端与服务端 2 个应用程序组成。")]),e._v(" "),r("p",[e._v("其中，客户端是一个 Electron 应用程序，它负责 UI 的渲染，以及与服务端的通信。而服务端则是一个 Node.js 应用程序，它负责处理客户端的请求，以及提供一些基础的功能。")]),e._v(" "),r("p",[e._v("而在 "),r("code",[e._v("VS Code For Web")]),e._v(" 中，得益于使用TS语言，其客户端可以几乎无缝扩展到浏览器中。因此，主要的改动点在于 "),r("code",[e._v("VS Code Server")]),e._v(" 的实现。")]),e._v(" "),r("p",[e._v("在 VSCode 的设计中， "),r("code",[e._v("VS Code Server")]),e._v(" 是 VSCode 服务端的一个子集，它只实现了 VSCode 的本地服务端的一部分功能，它的主要目的是为了提供一个更轻量级的服务端，以便于在云端环境中运行。")]),e._v(" "),r("p",[r("code",[e._v("VS Code For Web")]),e._v(" 的架构分为了两个部分：")]),e._v(" "),r("ol",[r("li",[e._v("Web Workbench，即 VSCode 的 Web 客户端，此处为浏览器各项服务配置的入口点，处理如何与后端建联，解析资源，以及加载 WebView 等。")]),e._v(" "),r("li",[e._v("Remote Server，为客户端提供 Terminal，File system，Debugger 等服务的访问能力。")])]),e._v(" "),r("p",[e._v("接下来，我们可以对照着 VSCode 的主要源码 "),r("a",{attrs:{href:"https://github.com/microsoft/vscode/tree/main/src/vs",target:"_blank",rel:"noopener noreferrer"}},[e._v("src/vs"),r("OutboundLink")],1),e._v("，来直观的理解代码架构。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://zakum-1252497671.cos.ap-guangzhou.myqcloud.com/20221013134251.png",alt:"20221013134251"}})]),e._v(" "),r("p",[e._v("其中，base 文件夹提供通用的基础依赖能力，如通用 UI 组件库，woker通信能力，IPC 通信能力等。platform 文件夹更上一层，提供依赖注入能力、以及剪切板、文件处理等基础能力Service。editor 文件夹即为代码编辑器 monaco，处理核心编辑区相关的内容。最外层的 workbench 文件夹则负责view层除了编辑器之外的工作区的UI布局与渲染。")]),e._v(" "),r("p",[e._v("而剩余部分即为启动客户端的支持能力。其中，code 文件夹为客户端启动的入口，包括从web端启动与桌面端启动。而 server 文件夹则是 "),r("code",[e._v("VS Code Server")]),e._v(" 的主要位置，负责运行服务端程序的 "),r("a",{attrs:{href:"https://github.com/microsoft/vscode/tree/main/src/vs/server",target:"_blank",rel:"noopener noreferrer"}},[e._v("entrypoint"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[e._v("其代码组织如下图所示：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://github.com/microsoft/vscode/wiki/images/organization/layers2.png",alt:"vscode code architecture"}})]),e._v(" "),r("p",[e._v("从架构设计上可以看出，VSCode 采用从 view 到 infrastructure 的分层思想，使得数据与事件流单向流动。")]),e._v(" "),r("p",[e._v("从这里也可以看到，VSCode 的客户端与服务端采用了同构的设计思路，使得客户端与服务端提供服务形式的切换变得更加容易，从架构上就兼顾到了 Web IDE 的可行性。")]),e._v(" "),r("h2",{attrs:{id:"vscode-for-web-职责分工"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vscode-for-web-职责分工"}},[e._v("#")]),e._v(" VSCode For Web 职责分工")]),e._v(" "),r("p",[e._v("VSCode Server 与客户端运行的 VSCode 的架构职责区分如下图所示：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://zakum-1252497671.cos.ap-guangzhou.myqcloud.com/20221009135447.png",alt:"20221009135447"}})]),e._v(" "),r("p",[e._v("我们知道 VSCode 是一个多进程项目，从这张图中我们可以看出，VSCode 将几乎所有的运算进程都交给了服务端。由于机能的限制，实际上，属于客户端处理的除了主进程外，只有 UI 绘制相关的进程，以及与插件服务与本地服务间的通信进程（语言相关的service除外，为了在web端也能拥有不错的开发体验，language server 是使用了worker thread 旁路执行的）。")]),e._v(" "),r("p",[e._v("因此VSCode Server 除了负责启动服务的 Running App 进程外，还需要处理如 Terminal，File system，Debugger、Search 等等进程。它们的生命周期都是由 VSCode Server 管理的。")]),e._v(" "),r("h2",{attrs:{id:"结语"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),r("p",[e._v("本篇文章为导读篇，主要介绍了 "),r("code",[e._v("VSCode For Web")]),e._v(" 的设计背景，并简单介绍了 "),r("code",[e._v("VSCode For Web")]),e._v(" 的架构设计，以及前后端的职责分工。在下一篇文章中，我们将会着重介绍 "),r("code",[e._v("VSCode For Web")]),e._v(" 的前后端通信机制。")])])}),[],!1,null,null,null);o.default=t.exports}}]);