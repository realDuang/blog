import{_ as n,o as s,c as a,b as t}from"./app-ZJlk8RDi.js";const p={},e=t(`<h2 id="什么是-react-高阶组件" tabindex="-1"><a class="header-anchor" href="#什么是-react-高阶组件"><span>什么是 React 高阶组件</span></a></h2><p>React 高阶组件就是以高阶函数的方式包裹需要修饰的 React 组件，并返回处理完成后的 React 组件。React 高阶组件在 React 生态中使用的非常频繁，比如<code>react-router</code> 中的 <code>withRouter</code> 以及 <code>react-redux</code> 中 <code>connect</code> 等许多 API 都是以这样的方式来实现的。</p><h2 id="使用-react-高阶组件的好处" tabindex="-1"><a class="header-anchor" href="#使用-react-高阶组件的好处"><span>使用 React 高阶组件的好处</span></a></h2><p>在工作中，我们经常会有很多功能相似，组件代码重复的页面需求，通常我们可以通过完全复制一遍代码的方式实现功能，但是这样页面的维护可维护性就会变得极差，需要对每一个页面里的相同组件去做更改。因此，我们可以将其中共同的部分，比如接受相同的查询操作结果、组件外同一的标签包裹等抽离出来，做一个单独的函数，并传入不同的业务组件作为子组件参数，而这个函数不会修改子组件，只是通过组合的方式将子组件包装在容器组件中，是一个无副作用的纯函数，从而我们能够在不改变这些组件逻辑的情况下将这部分代码解耦，提升代码可维护性。</p><h2 id="自己动手实现一个高阶组件" tabindex="-1"><a class="header-anchor" href="#自己动手实现一个高阶组件"><span>自己动手实现一个高阶组件</span></a></h2><p>前端项目里，带链接指向的面包屑导航十分常用，但由于面包屑导航需要手动维护一个所有目录路径与目录名映射的数组，而这里所有的数据我们都能从 <code>react-router</code> 的路由表中取得，因此我们可以从这里入手，实现一个面包屑导航的高阶组件。</p><p>首先我们看看我们的路由表提供的数据以及目标面包屑组件所需要的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这里展示的是 react-router4 的route示例</span>
<span class="token keyword">let</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">breadcrumb</span><span class="token operator">:</span> <span class="token string">&#39;一级目录&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/a&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../a/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">breadcrumb</span><span class="token operator">:</span> <span class="token string">&#39;二级目录&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/a/b&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../a/b/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>
        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">breadcrumb</span><span class="token operator">:</span> <span class="token string">&#39;三级目录1&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/a/b/c1&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../a/b/c1/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>
            <span class="token literal-property property">exact</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">breadcrumb</span><span class="token operator">:</span> <span class="token string">&#39;三级目录2&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/a/b/c2&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../a/b/c2/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>
            <span class="token literal-property property">exact</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">// 理想中的面包屑组件</span>
<span class="token comment">// 展示格式为 a / b / c1 并都附上链接</span>
<span class="token keyword">const</span> <span class="token function-variable function">BreadcrumbsComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> breadcrumbs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>breadcrumbs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">breadcrumb<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>span key<span class="token operator">=</span><span class="token punctuation">{</span>breadcrumb<span class="token punctuation">.</span>props<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>link to<span class="token operator">=</span><span class="token punctuation">{</span>breadcrumb<span class="token punctuation">.</span>props<span class="token punctuation">.</span>path<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>breadcrumb<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>link<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>index <span class="token operator">&lt;</span> breadcrumbs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>i<span class="token operator">&gt;</span> <span class="token operator">/</span> <span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们可以看到，面包屑组件需要提供的数据一共有三种，一种是当前页面的路径，一种是面包屑所带的文字，一种是该面包屑的导航链接指向。</p><p>其中第一种我们可以通过 react-router 提供的 withRouter 高阶组件包裹，可使子组件获取到当前页面的 location 属性，从而获取页面路径。</p><p>后两种需要我们对 routes 进行操作，首先将 routes 提供的数据扁平化成面包屑导航需要的格式，我们可以使用一个函数来实现它。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 以递归的方式展平react router数组
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">flattenRoutes</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span>
  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
      Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flattenRoutes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">:</span> item
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后将展平的目录路径映射与当前页面路径一同放入处理函数，生成面包屑导航结构。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBreadcrumbs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> flattenRoutes<span class="token punctuation">,</span> location <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化匹配数组match</span>
  <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  location<span class="token punctuation">.</span>pathname
    <span class="token comment">// 取得路径名，然后将路径分割成每一路由部分.</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 对每一部分执行一次调用\`getBreadcrumb()\`的reduce.</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curSection</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将最后一个路由部分与当前部分合并，比如当路径为 \`/x/xx/xxx\` 时，pathSection分别检查 \`/x\` \`/x/xx\` \`/x/xx/xxx\` 的匹配，并分别生成面包屑</span>
      <span class="token keyword">const</span> pathSection <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prev<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>curSection<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> breadcrumb <span class="token operator">=</span> <span class="token function">getBreadcrumb</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        flattenRoutes<span class="token punctuation">,</span>
        curSection<span class="token punctuation">,</span>
        pathSection<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 将面包屑导入到matches数组中</span>
      matches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>breadcrumb<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 传递给下一次reduce的路径部分</span>
      <span class="token keyword">return</span> pathSection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> matches<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后对于每一个面包屑路径部分，生成目录名称并附上指向对应路由位置的链接属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getBreadcrumb</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> flattenRoutes<span class="token punctuation">,</span> curSection<span class="token punctuation">,</span> pathSection <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> matchRoute <span class="token operator">=</span> flattenRoutes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">ele</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> breadcrumb<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>breadcrumb <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Router中的每一个route必须包含 \`path\` 以及 \`breadcrumb\` 属性&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 查找是否有匹配</span>
    <span class="token comment">// exact 为 react router4 的属性，用于精确匹配路由</span>
    <span class="token keyword">return</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>pathSection<span class="token punctuation">,</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> <span class="token literal-property property">exact</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回breadcrumb的值，没有就返回原匹配子路径名</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>matchRoute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">content</span><span class="token operator">:</span> matchRoute<span class="token punctuation">.</span>breadcrumb <span class="token operator">||</span> curSection<span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> matchRoute<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 对于routes表中不存在的路径</span>
  <span class="token comment">// 根目录默认名称为首页.</span>
  <span class="token keyword">return</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> pathSection <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;首页&#39;</span> <span class="token operator">:</span> curSection<span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> pathSection<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后由 render 函数生成最后的单个面包屑导航样式。单个面包屑组件需要为 render 函数提供该面包屑指向的路径 <code>path</code>, 以及该面包屑内容映射<code>content</code> 这两个 props。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 *
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> content<span class="token punctuation">,</span> path <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> componentProps <span class="token operator">=</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> content <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>content <span class="token punctuation">{</span><span class="token operator">...</span>componentProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>span <span class="token punctuation">{</span><span class="token operator">...</span>componentProps<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些功能函数，我们就能实现一个能为包裹组件传入当前所在路径以及路由属性的 React 高阶组件了。传入一个组件，返回一个新的相同的组件结构，这样便不会对组件外的任何功能与操作造成破坏。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">BreadcrumbsHoc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter">location <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
  routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">Component</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> BreadComponent <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Component
      breadcrumbs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">getBreadcrumbs</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">flattenRoutes</span><span class="token operator">:</span> <span class="token function">flattenRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">,</span>
        location<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> BreadComponent<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> BreadcrumbsHoc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用这个高阶组件的方法也非常简单，只需要传入当前所在路径以及整个 <code>react router</code> 生成的 <code>routes</code> 属性即可。 至于如何取得当前所在路径，我们可以利用 <code>react router</code> 提供的 <code>withRouter</code> 函数，如何使用请自行查阅相关文档。 值得一提的是，<code>withRouter</code> 本身就是一个高阶组件，能为包裹组件提供包括 <code>location</code> 属性在内的若干路由属性。所以这个 API 也能作为学习高阶组件一个很好的参考。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> location <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">BreadcrumbsHoc</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> routes<span class="token punctuation">)</span><span class="token punctuation">(</span>BreadcrumbsComponent<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a"><span>Q&amp;A</span></a></h2><p>如果<code>react router</code> 生成的 <code>routes</code> 不是由自己手动维护的，甚至都没有存在本地，而是通过请求拉取到的，存储在 redux 里，通过 <code>react-redux</code> 提供的 <code>connect</code> 高阶函数包裹时，路由发生变化时并不会导致该面包屑组件更新。使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span> state<span class="token punctuation">.</span>routes<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> location <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">BreadcrumbsHoc</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> routes<span class="token punctuation">)</span><span class="token punctuation">(</span>BreadcrumbsComponent<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>这其实是 <code>connect</code> 函数的一个<strong>bug</strong>。因为 react-redux 的 connect 高阶组件会为传入的参数组件实现 shouldComponentUpdate 这个钩子函数，导致<strong>只有 prop 发生变化时才触发更新相关的生命周期函数(含 render)</strong>，而很显然，我们的 location 对象并没有作为 prop 传入该参数组件。</p><p>官方推荐的做法是使用 <code>withRouter</code> 来包裹 <code>connect</code> 的 <code>return value</code>，即</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">withRouter</span><span class="token punctuation">(</span>
  <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> location<span class="token punctuation">,</span> routes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">BreadcrumbsHoc</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> routes<span class="token punctuation">)</span><span class="token punctuation">(</span>BreadcrumbsComponent<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实我们从这里也可以看出，高阶组件同高阶函数一样，不会对组件的类型造成任何更改，因此高阶组件就如同链式调用一样，可以任意多层包裹来给组件传入不同的属性，在正常情况下也可以随意调换位置，在使用上非常的灵活。这种可插拔特性使得高阶组件非常受 React 生态的青睐，很多开源库里都能看到这种特性的影子，有空也可以都拿出来分析一下。</p>`,30),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","liyong React gaojiezujianshixianyigemianbaoxiedaohang.html.vue"]]),k=JSON.parse('{"path":"/blogs/qianduanjichu/liyong React gaojiezujianshixianyigemianbaoxiedaohang.html","title":"利用 React 高阶组件实现一个面包屑导航","lang":"en-US","frontmatter":{"title":"利用 React 高阶组件实现一个面包屑导航","date":"2018/11/12 11:51:01","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[{"level":2,"title":"什么是 React 高阶组件","slug":"什么是-react-高阶组件","link":"#什么是-react-高阶组件","children":[]},{"level":2,"title":"使用 React 高阶组件的好处","slug":"使用-react-高阶组件的好处","link":"#使用-react-高阶组件的好处","children":[]},{"level":2,"title":"自己动手实现一个高阶组件","slug":"自己动手实现一个高阶组件","link":"#自己动手实现一个高阶组件","children":[]},{"level":2,"title":"Q&A","slug":"q-a","link":"#q-a","children":[]}],"git":{"createdTime":1716285190000,"updatedTime":1716285190000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/前端基础/利用 React 高阶组件实现一个面包屑导航.md"}');export{r as comp,k as data};
