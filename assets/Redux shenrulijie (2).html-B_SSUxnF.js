import{_ as e,o as a,c as s,b as n}from"./app-ZJlk8RDi.js";const t={},o=n(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>在理解了 redux 的作用原理后，我们来看看 redux 的基本概念。</p></div><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>state</span></a></h3><p><code>state</code>：state 是状态管理的根本。在 redux 中，有唯一的状态树 state，为整个应用共享。本质上是一个普通对象。处于程序逻辑中，无法直接调用。</p><h3 id="store" tabindex="-1"><a class="header-anchor" href="#store"><span>store</span></a></h3><p><code>store</code>：store 是 state 的管理者，一个应用同样只有唯一的 store，管理着唯一的 state。store 包含下列四个函数：</p><blockquote><p><code>getState()</code> ：用于获取整个 state</p><p><code>dispatch(action)</code> ：View 触发 action 改变 state 的<strong>唯一途径</strong>，请注意我用了<strong>唯一</strong>这个词</p><p><code>subscribe(listener)</code> ：可以理解成是 DOM 中的 addEventListener ，也就是我在上一篇里说过的发布订阅模式中的订阅方法，在 redux 的使用中，这个方法通常不需要手动使用，一般会放在 setState 方法中。</p><p><code>replaceReducer(nextReducer)</code> ：这个不太常用，一般在 Webpack Code-Splitting 按需加载的时候用获取 state 的方式：</p></blockquote><p>这几个方法中，<code>dispatch</code>函数略微难理解一点，单独提出来说说。</p><h3 id="dispatch" tabindex="-1"><a class="header-anchor" href="#dispatch"><span>dispatch</span></a></h3><p><code>dispatch(action)</code>用于 View 层想要更改 state 的操作，发布订阅模式中的发布操作。用于通知 store 做相应变更。</p><p>那么怎么让 store 知道变更哪一个属性呢？这里就要提到<code>action</code>了。<code>action</code>实际上是一个包含了<code>type</code>属性以及<code>payload</code>对象属性（这个叫载荷，不是必须的，但是在规范里推荐使用）的普通对象。其中<code>type</code>属性定义了应该进行的操作名。</p><p>我们从这里可以看出，由于载荷的存在，通常我们需要对<code>action</code>进行一些处理，因此，通常<code>action</code>对象由一个返回<code>action</code>对象的普通函数生成，一般我们称之为<code>actionCreator</code>函数。</p><p><code>actionCreator</code>函数不仅可以直接返回<code>action</code>对象，也可以返回一个闭包，闭包传入的参数可以为我们刚才介绍的 store 中的四个函数，最终结果必须返回一个<code>action</code>对象。</p><blockquote><p>注：<code>actionCreator</code>函数不能直接当做参数传入 dispatch 中，必须引入中间件<code>redux-thunk</code>。</p></blockquote><h3 id="createstore" tabindex="-1"><a class="header-anchor" href="#createstore"><span>createStore</span></a></h3><p>于是问题来了，既然<code>state</code>是由<code>store</code>生成和管理的，那么这个<code>store</code>又是怎么来的呢？生成 store 的方式又需要用到一个新的函数：<code>createStore(reducer, intialState, applyMiddleware)</code>。（<code>initialState</code>参数可以设置初始 state，非必须。<code>applyMiddleware(middlewares)</code>方法用于引入中间件，这里按住不表）这里又引出来一个新东西：reducer，这是干什么的呢？</p><h3 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer"><span>reducer</span></a></h3><p>刚刚说到的 action ，我的简单的理解是：type 的值就是函数名，payload 的值就是函数的传入参数。那么这个特殊的“函数”在哪里执行呢？redux 的思想是：当 View 层调用<code>dispatch</code>方法，发出相应的<code>action</code>给<code>store</code>，<code>store</code> 收到 <code>action</code> 以后，必须给出一个新的 <code>state</code>，这样 View 才会发生变化。这种 <code>state</code> 的计算过程就叫做 <code>reducer</code>。</p><p><code>reducer(oldState, action)</code>是一个纯函数（指任何时候输入同一个数据，返回的数据永远都相同，也就是说 reducer 函数中的处理不能带有任何异步操作），<code>reducer</code>负责对<code>state</code>操作，接收旧的 state 和 action，根据<code>action.type</code>的类型以及<code>action.payload</code>中的数据，处理 state 并返回。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;ADD&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&#39;DELETE&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>num<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一行代码简单来说就是<code>(oldState, action) =&gt; newState</code>。由于<code>reducer</code>是直接替换<code>state</code>，因此<code>reducer</code>必须有返回值。不然整个 redux 就会得不到<code>state</code>了。</p><p>话说一个计算变化重新生成 state 的方法为什么要叫 reducer 呢？我查了查资料，原来这个方法可以作为数组的<code>reduce</code>方法的参数。使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ADD&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ADD&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newState <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {..., count: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 redux 中，<code>reducer</code>和<code>state</code>一样，也是唯一的，因此如果我们需要根据不同的处理逻辑分割<code>reducer</code>的话，需要用<code>combineReducers({reducer})</code>将这些<code>reducer</code>合并成一个<code>rootReducer</code>。</p>`,23),c=[o];function p(r,d){return a(),s("div",null,c)}const l=e(t,[["render",p],["__file","Redux shenrulijie (2).html.vue"]]),u=JSON.parse('{"path":"/blogs/qianduanjichu/Redux shenrulijie (2).html","title":"Redux 深入理解 (2)","lang":"en-US","frontmatter":{"title":"Redux 深入理解 (2)","date":"2017/12/01 12:44:56","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[{"level":3,"title":"state","slug":"state","link":"#state","children":[]},{"level":3,"title":"store","slug":"store","link":"#store","children":[]},{"level":3,"title":"dispatch","slug":"dispatch","link":"#dispatch","children":[]},{"level":3,"title":"createStore","slug":"createstore","link":"#createstore","children":[]},{"level":3,"title":"reducer","slug":"reducer","link":"#reducer","children":[]}],"git":{"createdTime":1716285190000,"updatedTime":1716285190000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/前端基础/Redux 深入理解 (2).md"}');export{l as comp,u as data};
