import{_ as e,r as p,o,c,a as s,d as a,e as r,b as n}from"./app-CGUTolC_.js";const l={},i=n('<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>这一节主要来讲讲 Redux 在 React 项目中的具体使用。</p><p>将学的新知识新组件集成进项目里是初学者最大的障碍，这也是我最初学习 Redux 的时候很难有进展的原因。Redux 的源码体积很小，加起来连 1k 行都不到，利用的原理在之前已经说过，也很好理解，但由于 Redux 只是 Flux 对 React 的一种优化，但并不只是服务于 React，如果你愿意，在 Vue 中使用 Redux 也是完全可行的，毕竟状态管理的思想还是不会变的嘛。</p><p>因此我们需要一个 Redux 与 React 之间的连接件来方便我们的搭建，这就是<code>React-redux</code>。也是我们将 Redux 合并进 React 最后也是最大的难点。</p></div><h2 id="react-redux的总体思想" tabindex="-1"><a class="header-anchor" href="#react-redux的总体思想"><span><code>React-redux</code>的总体思想</span></a></h2><blockquote><p><code>React-redux</code> 将所有组件分成两大类：UI 组件和容器组件。</p></blockquote><p>UI 组件和容器组件的定义很好理解。</p><p>UI 组件不负责任何的交互逻辑，只负责展示，类比于纯函数，它是一个“纯组件”。不应该有自己定义的 state，所有的状态和事件动作应全由上层的 props 获取。</p><p>容器组件则跟 UI 组件相反，可以有自己的状态，能处理业务交互逻辑。</p><blockquote><p><code>React-redux</code> 规定，所有的 UI 组件都由用户提供，容器组件则是由 <code>React-redux</code> 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。</p></blockquote><p>这个思想完美的解决了逻辑数据处理与 UI 界面耦合的问题，让程序的思路更清晰，极大地提高开发与调试效率，这也是为什么越大型的项目越需要使用这样的状态管理组件的根本原因。</p><hr><p>之后我们来看看<code>React-redux</code>几个主要的功能方法：</p><h2 id="provider-store-store-app-app-provider" tabindex="-1"><a class="header-anchor" href="#provider-store-store-app-app-provider"><span><code>&lt;Provider store={store}&gt;&lt;app&gt;&lt;/app&gt;&lt;/Provider&gt;</code></span></a></h2><p>作为一个全局状态管理组件，我们首先应该想到的就是状态的传递。</p><p>最简单的想法是从应用的最外层传入当前的 state 状态，之后在接下来的每一层中层层 props 传递。但是这样做太麻烦了，而且很容易让传入状态难以维护，比如你要删去一个状态，就必须把这个组件下的所有子组件使用到这个状态的删除，不然就会报错。</p>',13),d={href:"http://kelekexiao.cn/2017/11/30/redux%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"React-redux",-1),k=n(`<p><code>Provider</code>组件直接包裹在需要调用全局 store 的根组件的外层，然后传入属性 store，即可在该根组件的任何后代组件中直接拿到 state 数据了。</p><p>如果你的项目还需要用到 React-router 的话，Provider 组件应包裹在 router 组件的外层。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="connect-mapstatetoprops-mapdispatchtoprops-app" tabindex="-1"><a class="header-anchor" href="#connect-mapstatetoprops-mapdispatchtoprops-app"><span><code>connect(mapStateToProps, mapDispatchToProps)(App)</code></span></a></h2><p>之前说过，<code>React-redux</code>希望用户只编写 UI 组件而不用注意状态管理，容器组件则是由 <code>React-redux</code> 自动生成，那么生成的方法就是<code>connect()</code>方法，我们用它将外层的状态以 props 的方式传入进 UI 组件。</p><p><code>connect()</code>方法接受两个参数，<code>mapStateToProps</code>用于传递 state，<code>mapDispatchToProps</code>用于传递 UI 组件需要调用的 store.dispatch 中的方法。</p><h2 id="mapstatetoprops-state-ownprops" tabindex="-1"><a class="header-anchor" href="#mapstatetoprops-state-ownprops"><span><code>mapStateToProps(state, ownProps)</code></span></a></h2><p><code>mapStateToProps</code>是一个函数，它接受<code>state</code>作为参数，返回一个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> state<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象的键名代表 UI 组件的 props 中的同名参数，键值为你希望传入的处理过后的值。</p><p><code>mapStateToProps</code>会订阅 Store，每当<code>state</code>更新的时候，就会重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</p><p>至于<code>mapStateToProps</code>的第二个参数<code>ownProps</code>是可选的，为该容器组件自身的 props，传入后若容器组件自身的 props 被改变同样会触发 UI 组件的重新渲染。</p><h2 id="mapdispatchtoprops" tabindex="-1"><a class="header-anchor" href="#mapdispatchtoprops"><span><code>mapDispatchToProps()</code></span></a></h2><p><code>mapDispatchToProps</code>可以是一个函数，也可以是一个对象。它定义了 UI 组件中的一些操作能够发出 action，被 store 响应。</p><p>当<code>mapDispatchToProps</code>作为对象时，结构与<code>mapStateToProps</code>类似。它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，这个函数我们之前提到过，叫做<code>actionCreator</code> ，它返回的 action 会由 Redux 自动发出。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;SET_CURRENT_TARGET&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">target</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> action
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>mapDispatchToProps</code>是一个函数时，可以传入<code>dispatch</code>和<code>ownProps</code>(容器组件的<code>props</code>对象)两个参数。返回值仍然一个对象，该对象的每个键值对事实上都是一个映射，定义了 UI 组件的这个键名参数应该怎样 dispatch，发出 action。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;SET_CURRENT_TARGET&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token literal-property property">target</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function v(m,h){const t=p("ExternalLinkIcon");return o(),c("div",null,[i,s("p",null,[a("我在 "),s("a",d,[a("Redux 深入理解(一)"),r(t)]),a(" 里面悄悄的提到了一个东西：context，也就是上下文，它可以实现祖先与后台之间的状态直接传值。这个特性被"),u,a("利用了，放入了 Provider 组件中。")]),k])}const x=e(l,[["render",v],["__file","2017-12-04.html.vue"]]),b=JSON.parse('{"path":"/blogs/frontend-basics/2017-12-04.html","title":"Redux 深入理解 (4)","lang":"en-US","frontmatter":{"title":"Redux 深入理解 (4)","date":"2017-12-04T15:22:30.000Z","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[{"level":2,"title":"React-redux的总体思想","slug":"react-redux的总体思想","link":"#react-redux的总体思想","children":[]},{"level":2,"title":"<Provider store={store}><app></app></Provider>","slug":"provider-store-store-app-app-provider","link":"#provider-store-store-app-app-provider","children":[]},{"level":2,"title":"connect(mapStateToProps, mapDispatchToProps)(App)","slug":"connect-mapstatetoprops-mapdispatchtoprops-app","link":"#connect-mapstatetoprops-mapdispatchtoprops-app","children":[]},{"level":2,"title":"mapStateToProps(state, ownProps)","slug":"mapstatetoprops-state-ownprops","link":"#mapstatetoprops-state-ownprops","children":[]},{"level":2,"title":"mapDispatchToProps()","slug":"mapdispatchtoprops","link":"#mapdispatchtoprops","children":[]}],"git":{"createdTime":1733141433000,"updatedTime":1733141433000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/frontend-basics/2017-12-04.md"}');export{x as comp,b as data};
