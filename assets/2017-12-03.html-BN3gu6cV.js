import{_ as e,o as a,c as t,b as o}from"./app-DG1e-Jaf.js";const c={},d=o(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>上一节说到，reducer 是一个纯函数。那么纯函数具体的定义是什么呢？阮一峰老师是这样说的：</p><p>纯函数是函数式编程的概念，必须遵守以下一些约束。</p><blockquote><ul><li><p>不得改写参数</p></li><li><p>不能调用系统 I/O 的 API</p></li><li><p>不能调用<code>Date.now()</code>或者<code>Math.random()</code>等不纯的方法，因为每次会得到不一样的结果</p></li></ul></blockquote></div><p>我们知道，处理业务逻辑的过程中不可避免的要用到异步操作，而 reducer 是一个纯函数，无法完成这项使命，那怎么办呢？</p><p>这又是一个非常复杂的故事了。</p><p>首先我想到的是，<code>action</code>不是由<code>actionCreator</code>函数生成的吗？我们可以在<code>actionCreator</code>函数里面进行异步操作，返回不同的<code>payload</code>，问题不就解决了吗？但是问题又来了，之前说过，reducer 不能接收一个函数作为参数传入啊。</p><p>事实上，著名的中间件<code>redux-thunk</code>就是处理这样的问题的，使得<code>actionCreator</code>方法能接受一个返回 action 对象的函数作为返回值。</p><p>那么这里就引入了一个中间件的概念。中间件实际上就是用来修饰 reducer 操作，增强 reducer 函数功能的。</p><p>我们来看看 redux 中间件是怎么运作的：</p><blockquote><p>若 reducer 涉及到异步操作，则必须使用中间件。创建 store 时使用<code>applyMiddleware(middleware)(createStore)(reducer, initialState)</code>来创建 store</p></blockquote><p>这看起来实在是太绕了……</p><p>实际上，我们可以将<code>applyMiddleware(middleware)</code>看成一个修饰器，用来修饰<code>createStore(reducer, initialState)</code>函数。是不是看明白了一点？</p><p>因此，这个函数我们也能写成这样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  initial_state<span class="token punctuation">,</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>applyMiddleware(middleware)</code>作为<code>createStore</code>的最后一个参数传入，现在是不是好理解多了？</p><p>另外，中间件的传入是有顺序讲究的，涉及到执行顺序的问题，通过 redux 中<code>applyMiddleware</code>的源码中可以看出，<code>applyMiddleware(middleware1，middleware2，middleware3)</code>的实际执行顺序为<code>store.dispatch</code>=&gt;<code>middleware1</code>=&gt;<code>middleware2</code>=&gt;<code>middleware3</code>。这一点一定要非常小心，比如著名的 redux-logger 中间件是用来记录操作日志的，一定要放在最后一个参数中以便第一时间执行。</p><p>redux 中间件的各种组件可谓是博大精深，有各种各样好用的中间件让人去探索学习，本文着重讲解 redux 本身的原理，对中间件插件就不多做介绍了。</p>`,15),n=[d];function r(s,i){return a(),t("div",null,n)}const l=e(c,[["render",r],["__file","2017-12-03.html.vue"]]),u=JSON.parse('{"path":"/blogs/frontend-basics/2017-12-03.html","title":"Redux 深入理解 (3)","lang":"en-US","frontmatter":{"title":"Redux 深入理解 (3)","date":"2017-12-03T13:00:52.000Z","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[],"git":{"createdTime":1737617896000,"updatedTime":1737617896000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/frontend-basics/2017-12-03.md"}');export{l as comp,u as data};
