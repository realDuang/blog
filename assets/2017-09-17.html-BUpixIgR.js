import{_ as i,r as p,o as l,c as o,a as n,d as s,e,b as t}from"./app-B9TWmIeZ.js";const c={},u=t(`<h2 id="为什么用-mongodb" tabindex="-1"><a class="header-anchor" href="#为什么用-mongodb"><span>为什么用 MongoDB</span></a></h2><p>传统的计算机应用大多使用关系型数据库来存储数据，比如大家可能熟悉的 MySql, Sqlite 等等，它的特点是数据以表格 (table) 的形式储存起来的。数据库由一张张排列整齐的表格构成，就好像一个 Excel 表单一样，每个表格会有若干列，比如一个学生信息表，可能包含学号、姓名、性别、入学年份、高考成绩、籍贯等等。而表格的每一排，则是一个个学生的具体信息。在企业级应用和前互联网时代，关系型数据库几乎是不二选择。关系型数据库的特点是有整齐划一的组织，很方便对数据进行描述、插入、搜索。</p><p>想象有一个传统的网上服装商店吧，它的主要的数据可能是储存在一张叫 products 的表单里，表单可能包含这些列：商品编号 (ID)、名称 (Name)、商家 (brand)、主目录 (cate)、子目录 (sub-cat)、零售价 (price)、是否促销 (promotion) 等等。如果有一个用户想要查找所有价格低于 300 元的正在促销的鞋子的编号和名称，则可以执行类似于以下的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ID<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> cate<span class="token operator">=</span><span class="token string">&#39;shoes&#39;</span> <span class="token operator">AND</span> price<span class="token operator">&lt;</span><span class="token number">300</span> <span class="token operator">and</span> <span class="token operator">AND</span> promotion<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>SQL 具备了强大了的深度查询能力，能满足各式各样的查询要求。而如果要对数据进行添加和删除，成本也是非常低的。这些是 SQL 的优势之一， 但随着互联网的兴起以及数据形式的多样化，四平八稳的 SQL 表单在一些领域渐渐显现出它的劣势。让我们通过一个例子来说明。考虑一个博客后台系统，如果我们用关系型数据库为每篇博客 (article) 建一个表单的话，这个表单大概会包括以下这些列：</p><table><thead><tr><th>ID</th><th style="text-align:center;">Title</th><th style="text-align:center;">Description</th><th style="text-align:center;">Author</th><th style="text-align:center;">Content</th><th style="text-align:center;">Likes</th></tr></thead><tbody><tr><td>A_1</td><td style="text-align:center;">Title1</td><td style="text-align:center;">Political Article</td><td style="text-align:center;">Joe</td><td style="text-align:center;">Content 1</td><td style="text-align:center;">12</td></tr><tr><td>A_2</td><td style="text-align:center;">Title2</td><td style="text-align:center;">Humorous Story</td><td style="text-align:center;">Sam</td><td style="text-align:center;">Content 2</td><td style="text-align:center;">50</td></tr></tbody></table><p>这时候用 SQL 数据库来存储是非常方便的，但假如我们要位每篇文章添加评论功能，会发现每篇文章可能要多篇评论，而且这个数目是动态变化的，而且每篇评论还包括好几项内容：评论的人、评论的时间、以及评论内容。这时候要将这些内容都塞进上述的那个表，就显得很困难。通常的做法是为评论 (comment) 单独建一个表：</p><table><thead><tr><th>ID</th><th style="text-align:center;">Author</th><th style="text-align:center;">Time</th><th style="text-align:center;">Content</th><th style="text-align:center;">Article</th></tr></thead><tbody><tr><td>C_1</td><td style="text-align:center;">Anna</td><td style="text-align:center;">2014-12-26 08:23</td><td style="text-align:center;">Really good articles!</td><td style="text-align:center;">A_1</td></tr><tr><td>C_2</td><td style="text-align:center;">David</td><td style="text-align:center;">2014-12-25 09:30</td><td style="text-align:center;">I like it!</td><td style="text-align:center;">A_1</td></tr></tbody></table><p>类似地，每篇文章可能会有若干标签 (tags)。标签本身又是一个表单：</p><table><thead><tr><th>ID</th><th style="text-align:center;">Category</th><th style="text-align:center;">Tags</th><th style="text-align:center;">Content</th><th style="text-align:center;">Article</th></tr></thead><tbody><tr><td>T_1</td><td style="text-align:center;">Anna</td><td style="text-align:center;">2014-12-26 08:23</td><td style="text-align:center;">Really good articles!</td><td style="text-align:center;">A_1</td></tr><tr><td>T_2</td><td style="text-align:center;">David</td><td style="text-align:center;">2014-12-25 09:30</td><td style="text-align:center;">I like it!</td><td style="text-align:center;">A_2</td></tr></tbody></table><p>而博客的表格则要通过 foreign key 跟这些相关联的表格联系起来(可能还包括作者、出版社等其它表格)。这样一来，当我们做查询的时候，比如说，“找出评论数不少于 3 的标签为‘政治评论’的作者为 Sam 的文章”，就会涉及到复杂的跨表查询，需要大量使用<code>join</code>语句。这种跨表查询不仅降低了查询速度，而且这些语句写起来也不简单。</p>`,11),d={href:"http://www.tutorialspoint.com/mongodb/mongodb_data_modeling.htm",target:"_blank",rel:"noopener noreferrer"},r=t(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code> _id<span class="token operator">:</span> POST_ID
 title<span class="token operator">:</span> TITLE_OF_POST<span class="token punctuation">,</span>
 description<span class="token operator">:</span> POST_DESCRIPTION<span class="token punctuation">,</span>
 author<span class="token operator">:</span> POST_BY<span class="token punctuation">,</span>
 tags<span class="token operator">:</span> <span class="token punctuation">[</span>TAG1<span class="token punctuation">,</span> TAG2<span class="token punctuation">,</span> TAG3<span class="token punctuation">]</span><span class="token punctuation">,</span>
 likes<span class="token operator">:</span> TOTAL_LIKES<span class="token punctuation">,</span>
 comments<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
       user<span class="token operator">:</span>&#39;COMMENT_BY&#39;<span class="token punctuation">,</span>
       message<span class="token operator">:</span> TEXT<span class="token punctuation">,</span>
       dateCreated<span class="token operator">:</span> DATE_TIME<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
       user<span class="token operator">:</span>&#39;COMMENT_BY&#39;<span class="token punctuation">,</span>
       message<span class="token operator">:</span> TEXT<span class="token punctuation">,</span>
       dateCreated<span class="token operator">:</span> DATE_TIME<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 MongoDB 里，每篇博客文章以一个文档 (document) 的形式保存起来，而文档内部包含了很多项目，比如<code>title tags</code>等，每一个项目都是<code>key-value</code>的形式，即有一个项目的名字，比如<code>title</code>，以及它的值<code>TITLE_OF_POST</code>。而重要的是，一个<code>key</code>可以有多个<code>values</code>，他们用<code>[]</code>括起来。</p><p>这种“宽松”的数据存储形式非常灵活，MongoDB 不限制每个<code>key</code>对应的<code>values</code>的数目。比如有的文章没有评论，则它的值就是一个空集，完全没有问题；有的文章评论很多，也可以无限制地插入。更灵活的是，MongoDB 不要求同一个集合 (collection，相当于 SQL 的 table) 里面的不同 document 有相同的 key，比如除了上述这种文档组织，有的文档所代表的文章可能没有 likes 这个项目，再比如有的文章可能有更多的项目，比如可能还有 dislikes 等等。这些不同的文档都可以灵活地存储在同一个集合下，而且查询起来也异常简单，因为都在一个文档里，不用进行各种跨文档查询。而这种 MongoDB 式的存储也方便了数据的维护，对于一篇博客文章来说，所有的相关数据都在这个 document 里面，不用去考虑一个数据操作需要 involve 多少个表格。</p>`,3),k={href:"http://www.tutorialspoint.com/mongodb/mongodb_advantages.htm",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="文章目的" tabindex="-1"><a class="header-anchor" href="#文章目的"><span>文章目的</span></a></h2><p>这个极简教程，或者说笔记，并不是一个覆盖 MongoDB 方方面面的教程。所谓极简的意思，就是只选取那些最重要、最常用的内容进行基于实例的介绍，从而让读者能够在最短的时间内快速上手，并且能顺利地进行后续的纵深的学习。</p><p>具体地说，这个教程的特点是：</p><ul><li>不求全面，只求实用。只覆盖最核心的部分；</li><li>以大量例子为导向；</li><li>一边阅读一边动手操作的话，大约只需要 2 小时的时间；</li></ul><p>阅读这篇文章不需要有特别的基础，但最好知道数据库的基本概念，如果本身熟悉 SQL 那就更好啦。</p><h3 id="安装与环境" tabindex="-1"><a class="header-anchor" href="#安装与环境"><span>安装与环境</span></a></h3><p>MongoDB 可以在 Windows、Linux、Mac OS X 等主流平台运行，而且下载和安装非常简单，非常友好。这篇文档的例子采用 MongoDB 2.6 版本，均在 OS X 测试过，有充足的理由相信，在其它平台也能顺利运行。</p>',7),b={href:"http://www.w3cschool.cc/mongodb/mongodb-window-install.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.w3cschool.cc/mongodb/mongodb-linux-install.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"Mac OS X 下的安装和设置：",-1),h={href:"https://www.mongodb.org/",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,"下载得到的文件是一个 zip 文件，解压，然后放到你想到的文件夹，比如/Users/Steven/MongoDB;",-1),x=n("li",null,"创建一个你喜欢的文件夹来存储你的数据，比如/User/Steven/myData;",-1),y=n("li",null,"打开 Terminal，cd 到 2 里面那个文件夹/Users/Steven/MongoDB，再 cd bin;",-1),f=n("li",null,"输入。/mongod --dbpath /User/Steven/myData, 等到出现类似“waiting for connections on port 27017”，说明 MongoDB 服务器已架设好，而数据将储存在 myData 里面；",-1),q=n("li",null,"新打开一个 Terminal, cd /Users/Steven/MongoDB/bin, 然后运行。/mongo; 顺利的话它将出现一个 interactive shell 让你进行各种操作，而你的数据将储存在 myData 里",-1),D=t(`<p>如果以上的各个步骤都运行顺利，就可以跳到下一节啦。</p><h3 id="创建集合和删除集合" tabindex="-1"><a class="header-anchor" href="#创建集合和删除集合"><span>创建集合和删除集合</span></a></h3><p>在上一节执行完步骤 6 后，你会看到命令行里显示：<code>connecting to: test</code>，这里的<code>test</code>是默认的数据库。这里我们可以新建一个数据库。在命令行里打入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>use tutorial
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就新建了一个叫做<code>tutorial</code>的数据库。你可以执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>show databases
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来显示当前的数据库。不过这时候由于我们的新数据库是空的，所以会显示类似这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>admin  <span class="token punctuation">(</span>empty<span class="token punctuation">)</span>
<span class="token builtin class-name">local</span>  <span class="token number">0</span>.078GB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们试着往我们的数据库里添加一个集合 (collection)，MongoDB 里的集合和 SQL 里面的表格是类似的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.createCollection<span class="token punctuation">(</span><span class="token string">&#39;author&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>顺利的话会显示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;ok&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示创建成功。</p><p>你可以再回头执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>show databases
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时候我们的 tutorial 集合已经位列其中。你可以再执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>show collections
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到创建的集合 author 也在其中。</p><p>我们暂时不需要 author 这个集合，所以我们可以通过执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.author.drop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来将其删除。这时候你再执行<code>show collections</code>，就再也看不到我们的 author 了。</p><p>这一节要记住的点主要只有一个：集合 (collection) 类似于 SQL 的表格 (table)，类似于 Excel 的一个个表格。</p><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><p>想象一个精简版的“豆瓣电影”。我们需要创建一个数据库，来存储每部电影的信息，电影的信息包括：</p><p>电影名字<br> 导演<br> 主演(可能多个)<br> 类型标签(可能多个)<br> 上映日期<br> 喜欢人数<br> 不喜欢人数<br> 用户评论(可能多个)</p><p>显然我们需要先创建一个叫电影的集合：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.createCollection<span class="token punctuation">(</span><span class="token string">&#39;movie&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们就可以插入数据了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.insert<span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    title: <span class="token string">&#39;Forrest Gump&#39;</span>,
    directed_by: <span class="token string">&#39;Robert Zemeckis&#39;</span>,
    stars: <span class="token punctuation">[</span><span class="token string">&#39;Tom Hanks&#39;</span>, <span class="token string">&#39;Robin Wright&#39;</span>, <span class="token string">&#39;Gary Sinise&#39;</span><span class="token punctuation">]</span>,
    tags: <span class="token punctuation">[</span><span class="token string">&#39;drama&#39;</span>, <span class="token string">&#39;romance&#39;</span><span class="token punctuation">]</span>,
    debut: new Date<span class="token punctuation">(</span><span class="token number">1994,7</span>,6,0,0<span class="token punctuation">)</span>,
    likes: <span class="token number">864367</span>,
    dislikes: <span class="token number">30127</span>,
    comments: <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        user:<span class="token string">&#39;user1&#39;</span>,
        message: <span class="token string">&#39;My first comment&#39;</span>,
        dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2013,11</span>,10,2,35<span class="token punctuation">)</span>,
        like: <span class="token number">0</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
        user:<span class="token string">&#39;user2&#39;</span>,
        message: <span class="token string">&#39;My first comment too!&#39;</span>,
        dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2013,11</span>,11,6,20<span class="token punctuation">)</span>,
        like: <span class="token number">0</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这里插入数据之前，我们并不需要先声明 movie 这个集合里面有哪些项目。我们直接插入就可以了~这一点和 SQL 不一样，SQL 必须先声明一个 table 里面有哪些列，而 MongoDB 不需要。</p><p>把上面的例子复制进命令行应该可以顺利运行，但我强烈建议你手动打一下，或者输入一部你自己喜欢的电影。<code>insert</code>操作有几点需要注意：</p><ol><li>不同 key-value 需要用逗号隔开，而 key:value 中间是用冒号；</li><li>如果一个 key 有多个 value，value 要用 []。哪怕当前只有一个 value，也加上 [] 以备后续的添加；</li><li>整个“数据块”要用{}括起来；</li></ol><p>如果你在<code>insert</code>之后看到<code>WriteResult({ &quot;nInserted&quot; : 1 })</code>，说明写入成功。</p><p>这个时候你可以用查询的方式来返回数据库中的数据：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里<code>find()</code>里面是空的，说明我们不做限制和筛选，类似于 SQL 没有<code>WHERE</code>语句一样。而<code>pretty()</code>输出的是经格式美化后的数据，你可以自己试试没有<code>pretty()</code>会怎么样。</p><p>仔细观察<code>find()</code>的结果，你会发现多了一个叫<code>&#39;_id&#39;</code>的东西，这是数据库自动创建的一个 ID 号，在同一个数据库里，每个文档的 ID 号都是不同的。</p><p>我们也可以同时输入多个数据：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.insert<span class="token punctuation">(</span><span class="token punctuation">[</span>
 <span class="token punctuation">{</span>
   title: <span class="token string">&#39;Fight Club&#39;</span>,
   directed_by: <span class="token string">&#39;David Fincher&#39;</span>,
   stars: <span class="token punctuation">[</span><span class="token string">&#39;Brad Pitt&#39;</span>, <span class="token string">&#39;Edward Norton&#39;</span>, <span class="token string">&#39;Helena Bonham Carter&#39;</span><span class="token punctuation">]</span>,
   tags: <span class="token string">&#39;drama&#39;</span>,
   debut: new Date<span class="token punctuation">(</span><span class="token number">1999,10</span>,15,0,0<span class="token punctuation">)</span>,
   likes: <span class="token number">224360</span>,
   dislikes: <span class="token number">40127</span>,
   comments: <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user3&#39;</span>,
         message: <span class="token string">&#39;My first comment&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2008,09</span>,13,2,35<span class="token punctuation">)</span>,
         like: <span class="token number">0</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user2&#39;</span>,
         message: <span class="token string">&#39;My first comment too!&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2003,10</span>,11,6,20<span class="token punctuation">)</span>,
         like: <span class="token number">14</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user7&#39;</span>,
         message: <span class="token string">&#39;Good Movie!&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2009,10</span>,11,6,20<span class="token punctuation">)</span>,
         like: <span class="token number">2</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>,
<span class="token punctuation">{</span>
   title: <span class="token string">&#39;Seven&#39;</span>,
   directed_by: <span class="token string">&#39;David Fincher&#39;</span>,
   stars: <span class="token punctuation">[</span><span class="token string">&#39;Morgan Freeman&#39;</span>, <span class="token string">&#39;Brad Pitt&#39;</span>,  <span class="token string">&#39;Kevin Spacey&#39;</span><span class="token punctuation">]</span>,
   tags: <span class="token punctuation">[</span><span class="token string">&#39;drama&#39;</span>,<span class="token string">&#39;mystery&#39;</span>,<span class="token string">&#39;thiller&#39;</span><span class="token punctuation">]</span>,
   debut: new Date<span class="token punctuation">(</span><span class="token number">1995,9</span>,22,0,0<span class="token punctuation">)</span>,
   likes: <span class="token number">134370</span>,
   dislikes: <span class="token number">1037</span>,
   comments: <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user3&#39;</span>,
         message: <span class="token string">&#39;Love Kevin Spacey&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2002,09</span>,13,2,35<span class="token punctuation">)</span>,
         like: <span class="token number">0</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user2&#39;</span>,
         message: <span class="token string">&#39;Good works!&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2013,10</span>,21,6,20<span class="token punctuation">)</span>,
         like: <span class="token number">14</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
         user:<span class="token string">&#39;user7&#39;</span>,
         message: <span class="token string">&#39;Good Movie!&#39;</span>,
         dateCreated: new Date<span class="token punctuation">(</span><span class="token number">2009,10</span>,11,6,20<span class="token punctuation">)</span>,
         like: <span class="token number">2</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺利的话会显示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>BulkWriteResult<span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token string">&quot;writeErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,
   <span class="token string">&quot;writeConcernErrors&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>,
   <span class="token string">&quot;nInserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,
   <span class="token string">&quot;nUpserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,
   <span class="token string">&quot;nMatched&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,
   <span class="token string">&quot;nModified&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,
   <span class="token string">&quot;nRemoved&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,
   <span class="token string">&quot;upserted&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表面我们成功地插入了两个数据。注意批量插入的格式是这样的：<code>db.movie.insert([{ITEM1},{ITEM2}])</code>。几部电影的外面需要用 [] 括起来。</p><p>请注意，虽然 collection 的插入不需要先声明，但表达相同意思的 key，名字要一样，比如，如果我们在一个文档里用<code>directed_by</code>来表示导演，则在其它文档也要保持同样的名字(而不是<code>director</code>之类的)。不同的名字不是不可以，技术上完全可行，但会给查询和更新带来困难。</p><p>好了，到这里，我们就有了一个叫 tutorial 的数据库，里面有一个叫 movie 的集合，而 movie 里面有三个记录。接下来我们就可以对其进行查询了。</p><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><p>在上一节我们已经接触到最简单的查询<code>db.movie.find().pretty()</code>。MongoDB 支持各种各样的深度查询功能。先来一个最简单的例子，找出大卫芬奇 (David Fincher) 导演的所有电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;directed_by&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;David Fincher&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将返回《搏击俱乐部》和《七宗罪》两部电影。这种搜索和 SQL 的<code>WHERE</code>语句是很相似的。</p><p>也可以设置多个条件。比如找出大卫芬奇导演的，摩根弗里曼主演的电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;directed_by&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;David Fincher&#39;</span>, <span class="token string">&#39;stars&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Morgan Freeman&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里两个条件之间，是 AND 的关系，只有同时满足两个条件的电影才会被输出。同理，可以设置多个的条件，不赘述。</p><p>条件之间也可以是或的关系，比如找出罗宾怀特或摩根弗里曼主演的电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span>
<span class="token punctuation">{</span>
  <span class="token variable">$or</span><span class="token builtin class-name">:</span>
     <span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token string">&#39;stars&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Robin Wright&#39;</span><span class="token punctuation">}</span>,
        <span class="token punctuation">{</span><span class="token string">&#39;stars&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Morgan Freeman&#39;</span><span class="token punctuation">}</span>
     <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里面稍显复杂的各种括号。</p><p>还可以设置一个范围的搜索，比如找出 50 万人以上赞的电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;likes&#39;</span>:<span class="token punctuation">{</span><span class="token variable">$gt</span>:500000<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样要注意略复杂的括号。注意，在这些查询里，key 的单引号都是可选的，也就是说，上述语句也可以写成：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>likes:<span class="token punctuation">{</span><span class="token variable">$gt</span>:500000<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似地，少于二十万人赞的电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>likes:<span class="token punctuation">{</span><span class="token variable">$lt</span>:200000<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似的运算符还有：<code>$let</code>: 小于或等于；<code>$get</code>: 大于或等于；<code>$ne</code>: 不等于。</p><p>注意，对于包含多个值的 key，同样可以用 find 来查询。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;romance&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将返回《阿甘正传》，虽然其标签既有 romance，又有 drama，但只要符合一个就可以了。</p><p>如果你确切地知道返回的结果只有一个，也可以用<code>findOne</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.findOne<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Forrest Gump&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有多个结果，则会按磁盘存储顺序返回第一个。请注意，<code>findOne()</code>自带 pretty 模式，所以不能再加<code>pretty()</code>，将报错。</p><p>如果结果很多而你只想显示其中一部分，可以用<code>limit()</code>和<code>skip()</code>，前者指明输出的个数，后者指明从第二个结果开始数。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.limit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>.skip<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则跳过第一部，从第二部开始选取两部电影。</p><h3 id="局部查询" tabindex="-1"><a class="header-anchor" href="#局部查询"><span>局部查询</span></a></h3><p>第五节的时候我们讲了<code>find</code>的用法，但对于符合条件的条目，我们都是返回整个 JSON 文件的。这类似于 SQL 里面的<code>SELECT *</code>。有的时候，我们需要的，仅仅是部分数据，这个时候，<code>find</code>的局部查询的功能就派上用场了。先来看一个例子，返回 tags 为 drama 的电影的名字和首映日期。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;drama&#39;</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">&#39;debut&#39;</span>:1,<span class="token string">&#39;title&#39;</span>:1<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数据库将返回：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;549cfb42f685c085f1dd47d4&quot;</span><span class="token punctuation">)</span>,
  <span class="token string">&quot;title&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Forrest Gump&quot;</span>,
  <span class="token string">&quot;debut&quot;</span> <span class="token builtin class-name">:</span> ISODate<span class="token punctuation">(</span><span class="token string">&quot;1994-08-05T16:00:00Z&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;549cff96f685c085f1dd47d6&quot;</span><span class="token punctuation">)</span>,
  <span class="token string">&quot;title&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Fight Club&quot;</span>,
  <span class="token string">&quot;debut&quot;</span> <span class="token builtin class-name">:</span> ISODate<span class="token punctuation">(</span><span class="token string">&quot;1999-11-14T16:00:00Z&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">&quot;549cff96f685c085f1dd47d7&quot;</span><span class="token punctuation">)</span>,
  <span class="token string">&quot;title&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Seven&quot;</span>,
  <span class="token string">&quot;debut&quot;</span> <span class="token builtin class-name">:</span> ISODate<span class="token punctuation">(</span><span class="token string">&quot;1995-10-21T16:00:00Z&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 find 的第二个参数是用来控制输出的，1 表示要返回，而 0 则表示不返回。默认值是 0，但<code>_id</code>是例外，因此如果你不想输出<code>_id</code>，需要显式地声明：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;drama&#39;</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">&#39;debut&#39;</span>:1,<span class="token string">&#39;title&#39;</span>:1,<span class="token string">&#39;_id&#39;</span>:0<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><p>很多情况下你需要更新你的数据库，比如有人对某部电影点了个赞，那么你需要更新相应的数据库。比如有人对《七宗罪》点了个赞，而它本来的赞的个数是 134370，那么你需要更新到 134371。可以这样操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;Seven&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>likes:134371<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个大括号里表明要选取的对象，第二个表明要改动的数据。请注意上述的操作相当不现实，因为你首先要知道之前的数字是多少，然后加一，但通常你不读取数据库的话，是不会知道这个数 (134370) 的。MongoDB 提供了一种简便的方法，可以对现有条目进行增量操作。假设又有人对《七宗罪》点了两个赞，则可以：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;Seven&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>likes:2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,82),w=n("code",null,"$inc",-1),M={href:"http://docs.mongodb.org/manual/reference/operator/update-field/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>注意如果有多部符合要求的电影。则默认只会更新第一个。如果要多个同时更新，要设置<code>{multi:true}</code>，像下面这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>likes:10<span class="token punctuation">}</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span>multi:true<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有电影的赞数都多了 10.</p><p>注意，以上的更新操作会替换掉原来的值，所以如果你是想在原有的值得基础上增加一个值的话，则应该用<code>$push</code>，比如，为《七宗罪》添加一个 popular 的 tags。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Seven&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token variable">$push</span>:<span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;popular&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现《七宗罪》现在有四个标签：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token string">&quot;tags&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;drama&quot;</span>,
    <span class="token string">&quot;mystery&quot;</span>,
    <span class="token string">&quot;thiller&quot;</span>,
    <span class="token string">&quot;popular&quot;</span>
  <span class="token punctuation">]</span>,

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>删除的句法和 find 很相似，比如，要删除标签为 romance 的电影，则：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;romance&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>考虑到我们数据库条目异常稀少，就不建议你执行这条命令了~</p><p>注意，上面的例子会删除所有标签包含 romance 的电影。如果你只想删除第一个，则</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.remove<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tags&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;romance&#39;</span><span class="token punctuation">}</span>,1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不加任何限制：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会删除 movie 这个集合下的所有文档。</p><h3 id="索引和排序" tabindex="-1"><a class="header-anchor" href="#索引和排序"><span>索引和排序</span></a></h3><p>为文档中的一些 key 加上索引 (index) 可以加快搜索速度。这一点不难理解，假如没有没有索引，我们要查找名字为 Seven 的电影，就必须在所有文档里逐个搜索。而如果对名字这个 key 加上索引值，则电影名这个字符串和数字建立了映射，这样在搜索的时候就会快很多。排序的时候也是如此，不赘述。MongoDB 里面为某个 key 加上索引的方式很简单，比如我们要对导演这个 key 加索引，则可以：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.ensureIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>directed_by:1<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 1 是升序索引，如果要降序索引，用-1。</p><p>MongoDB 支持对输出进行排序，比如按名字排序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span>:1<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样地，1 是升序，-1 是降序。默认是 1。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将返回所有索引，包括其名字。</p><p>而</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.dropIndex<span class="token punctuation">(</span><span class="token string">&#39;index_name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将删除对应的索引。</p><h3 id="_11-聚合" tabindex="-1"><a class="header-anchor" href="#_11-聚合"><span>11. 聚合</span></a></h3><p>MongoDB 支持类似于 SQL 里面的<code>GROUP BY</code>操作。比如当有一张学生成绩的明细表时，我们可以找出每个分数段的学生各有多少。为了实现这个操作，我们需要稍加改动我们的数据库。执行以下三条命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;Seven&#39;</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>grade:1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;Forrest Gump&#39;</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>grade:1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db.movie.update<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;Fight Club&#39;</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token variable">$set</span>:<span class="token punctuation">{</span>grade:2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这几条是给每部电影加一个虚拟的分级，前两部是归类是一级，后一部是二级。</p><p>这里你也可以看到 MongoDB 的强大之处：可以动态地后续添加各种新项目。</p><p>我们先通过聚合来找出总共有几种级别。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$grade&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里的 2 和 1 是指级别，而不是每个级别的电影数。这个例子看得清楚些：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$directed_by&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里按照导演名字进行聚合。输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;David Fincher&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Robert Zemeckis&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们要找出，每个导演的电影数分别有多少：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$directed_by&#39;</span>,num_movie:<span class="token punctuation">{</span><span class="token variable">$sum</span>:1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将会输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;David Fincher&quot;</span>, <span class="token string">&quot;num_movie&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Robert Zemeckis&quot;</span>, <span class="token string">&quot;num_movie&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意$sum 后面的 1 表示只是把电影数加起来，但我们也可以统计别的数据，比如两位导演谁的赞比较多：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$directed_by&#39;</span>,num_likes:<span class="token punctuation">{</span><span class="token variable">$sum</span><span class="token builtin class-name">:</span><span class="token string">&#39;$likes&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;David Fincher&quot;</span>, <span class="token string">&quot;num_likes&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">358753</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;Robert Zemeckis&quot;</span>, <span class="token string">&quot;num_likes&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">864377</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这些数据都纯属虚构啊！</p><p>除了<code>$sum</code>，还有其它一些操作。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$directed_by&#39;</span>,num_movie:<span class="token punctuation">{</span><span class="token variable">$avg</span><span class="token builtin class-name">:</span><span class="token string">&#39;$likes&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计平均的赞。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$group</span>:<span class="token punctuation">{</span>_id:<span class="token string">&#39;$directed_by&#39;</span>,num_movie:<span class="token punctuation">{</span><span class="token variable">$first</span><span class="token builtin class-name">:</span><span class="token string">&#39;$likes&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回每个导演的电影中的第一部的赞数。</p>`,55),B={href:"http://docs.mongodb.org/manual/reference/operator/aggregation/group/",target:"_blank",rel:"noopener noreferrer"},E=n("h3",{id:"all-or-nothing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#all-or-nothing"},[n("span",null,"All or Nothing")])],-1),T={href:"http://docs.mongodb.org/manual/reference/operator/aggregation/group/",target:"_blank",rel:"noopener noreferrer"},$=t(`<p>MongoDB 提供了<code>findAndModify</code>的方法来确保 atomic operation。比如这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.findAndModify<span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
      query:<span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;Forrest Gump&#39;</span><span class="token punctuation">}</span>,
      update:<span class="token punctuation">{</span><span class="token variable">$inc</span>:<span class="token punctuation">{</span>likes:10<span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
          <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>query 是查找出匹配的文档，和 find 是一样的，而 update 则是更新 likes 这个项目。注意由于 MongoDB 只支持单个文档的 atomic operation，因此如果 query 出多于一个文档，则只会对第一个文档进行操作。</p>`,3),A=n("code",null,"findAndModify",-1),I={href:"http://docs.mongodb.org/manual/reference/command/findAndModify/",target:"_blank",rel:"noopener noreferrer"},C=t(`<h3 id="文本搜索" tabindex="-1"><a class="header-anchor" href="#文本搜索"><span>文本搜索</span></a></h3><p>除了前面介绍的各种深度查询功能，MongoDB 还支持文本搜索。对文本搜索之前，我们需要先对要搜索的 key 建立一个 text 索引。假定我们要对标题进行文本搜索，我们可以先这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.ensureIndex<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token string">&#39;text&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着我们就可以对标题进行文本搜索了，比如，查找带有&quot;Gump&quot;的标题：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$text</span>:<span class="token punctuation">{</span><span class="token variable">$search</span><span class="token builtin class-name">:</span><span class="token string">&quot;Gump&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意 text 和 search 前面的$符号。</p><p>这个例子里，文本搜索作用不是非常明显。但假设我们要搜索的 key 是一个长长的文档，这种 text search 的方便性就显现出来了。MongoDB 目前支持 15 种语言的文本搜索。</p><h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h3>`,8),L={href:"http://en.wikipedia.org/wiki/Regular_expression",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"b",-1),F=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token punctuation">{</span><span class="token variable">$regex</span><span class="token builtin class-name">:</span><span class="token string">&#39;.*b$&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以写成：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>title:/.*b$/<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找含有&#39;Fight&#39;标题的电影：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>title:/Fight/<span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意以上匹配都是区分大小写的，如果你要让其不区分大小写，则可以：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span>title:<span class="token punctuation">{</span><span class="token variable">$regex</span><span class="token builtin class-name">:</span><span class="token string">&#39;fight.*b&#39;</span>,<span class="token variable">$options</span><span class="token builtin class-name">:</span><span class="token string">&#39;$i&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>$i</code>是 insensitive 的意思。这样的话，即使是小写的 fight，也能搜到了。</p><h3 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h3><p>至此，MongoDB 的最基本的内容就介绍得差不多了。如果有什么遗漏的以后我会补上來。如果你一路看到底完全了这个入门教程，恭喜你，你一定是一个有毅力的人。</p><p>把这个文档过一遍，不会让你变成一个 MongoDB 的专家(如果会那就太奇怪了)。但如果它能或多或少减少你上手的时间，或者让你意识到“咦，MongoDB 其实没那么复杂”，那么这个教程的目的也就达到啦。</p><p>这个文档是匆忙写就的，出错简直是一定的。如果您发现了任何错误或者有关于本文的任何建议，麻烦发邮件给我(stevenslxie at gmail.com)或者在 GitHub 上直接交流，不胜感激。</p><h3 id="转载声明" tabindex="-1"><a class="header-anchor" href="#转载声明"><span>转载声明</span></a></h3><p>原作者 StevenSLXie</p>`,14),R={href:"https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md",target:"_blank",rel:"noopener noreferrer"};function N(G,Q){const a=p("ExternalLinkIcon");return l(),o("div",null,[u,n("p",null,[s("那么，如果用 MongoDB 数据库来实现，可以如何设计数据模型呢？很简单，像下面这样 "),n("a",d,[s("http://www.tutorialspoint.com/mongodb/mongodb_data_modeling.htm"),e(a)])]),r,n("p",null,[s("当然，除了上述的优点，MongoDB 还有不少别的优势，比如 MongoDB 的数据是用 JSON(Javascript Object Notation) 存储的(就是上面的这种 key-value 的形式)，而几乎所有的 web 应用都是基于 Javascript 的。因此，存储的数据和应用的数据的格式是高度一致的，不需经过转换。更多的优点可以查看："),n("a",k,[s("http://www.tutorialspoint.com/mongodb/mongodb_advantages.htm"),e(a)]),s("。")]),v,n("p",null,[s("Windows 的安装和设置可以参考："),n("a",b,[s("http://www.w3cschool.cc/mongodb/mongodb-window-install.html"),e(a)])]),n("p",null,[s("Linux 的安装和设置可以参考："),n("a",m,[s("http://www.w3cschool.cc/mongodb/mongodb-linux-install.html"),e(a)])]),g,n("ol",null,[n("li",null,[s("在 "),n("a",h,[s("https://www.mongodb.org/"),e(a)]),s(" 下载适合你的 Mac 的 MongoDb;")]),_,x,y,f,q]),D,n("p",null,[s("如果你查询的话，会发现点赞数变为 134373 了，这里用的是"),w,s("。除了增量更新，MongoDB 还提供了很多灵活的更新选项，具体可以看："),n("a",M,[s("http://docs.mongodb.org/manual/reference/operator/update-field/"),e(a)]),s(" 。")]),S,n("p",null,[s("其它各种操作可以参考："),n("a",B,[s("http://docs.mongodb.org/manual/reference/operator/aggregation/group/"),e(a)]),s("。")]),E,n("p",null,[s("MongoDB 支持单个文档内的原子化操作 (atomic operation)，这是说，可以将多条关于同一个文档的指令放到一起，他们要么一起执行，要么都不执行。而不会执行到一半。有些场合需要确保多条执行一起顺次执行。比如一个场景：一个电商网站，用户查询某种商品的剩余数量，以及用户购买该种商品，这两个操作，必须放在一起执行。不然的话，假定我们先执行剩余数量的查询，这是假定为 1，用户接着购买，但假如这两个操作之间还加入了其它操作，比如另一个用户抢先购买了，那么原先购买用户的购买的行为就会造成数据库的错误，因为实际上这种商品以及没有存货了。但因为查询剩余数量和购买不是在一个“原子化操作”之内，因此会发生这样的错误 "),n("a",T,[s("http://www.tutorialspoint.com/mongodb/mongodb_atomic_operations.htm"),e(a)]),s("。")]),$,n("p",null,[A,s("还支持更多的操作，具体见："),n("a",I,[s("http://docs.mongodb.org/manual/reference/command/findAndModify/"),e(a)]),s("。")]),C,n("p",null,[s("MongoDB 还支持基于正则表达式的查询。如果不知道正则表达式是什么，可以参考 "),n("a",L,[s("Wikipedia"),e(a)]),s("。这里简单举几个例子。比如，查找标题以"),O,s("结尾的电影信息：")]),F,n("p",null,[s("原链接 "),n("a",R,[s("https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md"),e(a)])])])}const P=i(c,[["render",N],["__file","2017-09-17.html.vue"]]),j=JSON.parse('{"path":"/blogs/frontend-tech-institute/2017-09-17.html","title":"MongoDB 极简实践入门","lang":"en-US","frontmatter":{"title":"MongoDB 极简实践入门","date":"2017-09-17T17:13:38.000Z","categories":["前端技术研究院"],"tags":["MongoDB"]},"headers":[{"level":2,"title":"为什么用 MongoDB","slug":"为什么用-mongodb","link":"#为什么用-mongodb","children":[]},{"level":2,"title":"文章目的","slug":"文章目的","link":"#文章目的","children":[{"level":3,"title":"安装与环境","slug":"安装与环境","link":"#安装与环境","children":[]},{"level":3,"title":"创建集合和删除集合","slug":"创建集合和删除集合","link":"#创建集合和删除集合","children":[]},{"level":3,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"局部查询","slug":"局部查询","link":"#局部查询","children":[]},{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"索引和排序","slug":"索引和排序","link":"#索引和排序","children":[]},{"level":3,"title":"11. 聚合","slug":"_11-聚合","link":"#_11-聚合","children":[]},{"level":3,"title":"All or Nothing","slug":"all-or-nothing","link":"#all-or-nothing","children":[]},{"level":3,"title":"文本搜索","slug":"文本搜索","link":"#文本搜索","children":[]},{"level":3,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":3,"title":"后记","slug":"后记","link":"#后记","children":[]},{"level":3,"title":"转载声明","slug":"转载声明","link":"#转载声明","children":[]}]}],"git":{"createdTime":1733141773000,"updatedTime":1733141773000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/frontend-tech-institute/2017-09-17.md"}');export{P as comp,j as data};
