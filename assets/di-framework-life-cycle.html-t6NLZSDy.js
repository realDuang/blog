import{_ as a,r as t,o as e,c as p,a as n,d as o,e as c,b as i}from"./app-G6HZ3mX7.js";const l={},r=i(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>在上一篇介绍了 VSCode 的依赖注入设计，并且实现了一个简单的 IOC 框架。但是距离成为一个生产环境可用的框架还差的很远。</p><p>行业内已经有许多非常优秀的开源 IOC 框架，它们划分了更为清晰地模块来应对复杂情况下依赖注入运行的正确性。</p><p>这里我将以 InversifyJS 为例，分析它的生命周期设计，来弄清楚在一个优秀的 IOC 框架中，完成一次注入流程到底是什么样的。</p></div><h2 id="inversifyjs-的生命周期" tabindex="-1"><a class="header-anchor" href="#inversifyjs-的生命周期"><span>InversifyJS 的生命周期</span></a></h2><p>在激活 InversifyJS 后，框架通常会监听并经历五个阶段，分别是：</p><ol><li>Annotation 注释阶段</li><li>Planning 规划阶段</li><li>Middleware (optional) 中间件钩子</li><li>Resolution 解析执行阶段</li><li>Activation (optional) 激活钩子</li></ol><p>本篇文章将着重介绍其中的<strong>三个必选阶段</strong>。旨在解释框架到底是如何规划模块实例化的先后顺序，以实现依赖注入能力的。</p><p>接下来的解析将围绕如下例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FooBar</span> <span class="token keyword">implements</span> <span class="token class-name">FooBarInterface</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> foo<span class="token operator">:</span> FooInterface<span class="token punctuation">;</span>
  <span class="token keyword">public</span> bar<span class="token operator">:</span> BarInterface<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">inject</span></span><span class="token punctuation">(</span><span class="token string">&quot;FooInterface&quot;</span><span class="token punctuation">)</span> foo<span class="token operator">:</span> FooInterface<span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">inject</span></span><span class="token punctuation">(</span><span class="token string">&quot;BarInterface&quot;</span><span class="token punctuation">)</span> bar<span class="token operator">:</span> BarInterface
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foobar <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>FooBarInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;FooBarInterface&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="annotation-注释阶段" tabindex="-1"><a class="header-anchor" href="#annotation-注释阶段"><span>Annotation 注释阶段</span></a></h2><p>在此阶段中，框架将通过装饰器为所有接入框架的对象打上标记，以便规划阶段时进行管理。</p><p>在这个阶段中，最重要的 API 就是 <code>injectable</code> 。它使用 Reflect metadata，对 Class 构造函数中通过 <code>inject</code> API 注入的 property 进行标注，并挂在在了该类的 <code>metadataKey</code> 上。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">hasOwnMetadata</span><span class="token punctuation">(</span><span class="token constant">METADATA_KEY</span><span class="token punctuation">.</span><span class="token constant">PARAM_TYPES</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token constant">ERRORS_MSGS</span><span class="token punctuation">.</span><span class="token constant">DUPLICATED_INJECTABLE_DECORATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> types <span class="token operator">=</span>
      Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">METADATA_KEY</span><span class="token punctuation">.</span><span class="token constant">DESIGN_PARAM_TYPES</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">METADATA_KEY</span><span class="token punctuation">.</span><span class="token constant">PARAM_TYPES</span><span class="token punctuation">,</span> types<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="planning-规划阶段" tabindex="-1"><a class="header-anchor" href="#planning-规划阶段"><span>Planning 规划阶段</span></a></h2><p>本阶段时该框架的核心阶段，它真正生成了在一个 Container 中，所有类模块的依赖关系树。因此，在 Container 类进行实例化时，规划阶段就开始了。</p><p>在实例化时，根据传入的 id 与 scope 可以确定该实例容器的作用域范围，生成一个 context，拥有对内左右模块的管理权。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name">interfaces</span><span class="token punctuation">.</span>Context <span class="token punctuation">{</span>
  <span class="token keyword">public</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> container<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Container<span class="token punctuation">;</span>
  <span class="token keyword">public</span> plan<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Plan<span class="token punctuation">;</span>
  <span class="token keyword">public</span> currentRequest<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Request<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>container<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// generate a unique id</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">addPlan</span><span class="token punctuation">(</span>plan<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Plan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>plan <span class="token operator">=</span> plan<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function">setCurrentRequest</span><span class="token punctuation">(</span>currentRequest<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>currentRequest <span class="token operator">=</span> currentRequest<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以注意到，这个 context 中包含一个空的 plan 对象，这是 planning 阶段的核心，该阶段就是为生成的容器规划好要执行的任务。</p><p>plan 对象中将包含一个 request 对象，request 是一个可递归的属性结构，它包含了要查找的 id 外，还需要 target 参数，即规定找到依赖实例后将引用赋值给哪个参数。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token keyword">implements</span> <span class="token class-name">interfaces</span><span class="token punctuation">.</span>Request <span class="token punctuation">{</span>
    <span class="token keyword">public</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> serviceIdentifier<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>ServiceIdentifier<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 被修饰类 id</span>
    <span class="token keyword">public</span> parentContext<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Context<span class="token punctuation">;</span>
    <span class="token keyword">public</span> parentRequest<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Request <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 树形结构的 request，指向父节点</span>
    <span class="token keyword">public</span> bindings<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Binding<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> childRequests<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Request<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 树形结构的 request，指向子节点</span>
    <span class="token keyword">public</span> target<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>Target<span class="token punctuation">;</span> <span class="token comment">// 指向赋值目标参数</span>
    <span class="token keyword">public</span> requestScope<span class="token operator">:</span> interfaces<span class="token punctuation">.</span>RequestScope<span class="token punctuation">;</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以篇头的例子为例。在容器执行 get 函数后，框架生成了一个新的 plan，该 plan 的生成过程中将执行_createSubRequests 方法，从上而下创建 Request 依赖树。</p><p>创建完成后的 plan 对象生成的 request 树将包含有请求目标为 null 的根 request 与两个子 request：</p><p>第一个子 request 指向 FooInterface 接口，并且请求结果的 target 赋值给构造函数中的参数 foo。第二个子 request 指向 BarInterface 接口，并且请求结果的 target 赋值给构造函数中的参数 bar。</p><p>注意，此处的依赖树生成仍在 interface 层面，没有任何类被实例化。</p><p>用一张图来更直观地表现该阶段中各对象的生成调用过程：</p><p><img src="https://zakum-1252497671.cos.ap-guangzhou.myqcloud.com/20230209165944.png" alt="20230209165944"></p><p>这样，每一个类与其依赖项之间的请求关系就构造完毕了。</p><h2 id="resolution-解析执行阶段" tabindex="-1"><a class="header-anchor" href="#resolution-解析执行阶段"><span>Resolution 解析执行阶段</span></a></h2><p>该阶段便是执行在规划阶段中生成的 request 依赖树，从无依赖的叶子节点开始，自下而上实例化每一个依赖类，到根 request 结束时，即最终完成 <code>FooBar</code> 自身的实例化。</p><p>且该解析过程可以选择同步或异步执行，在复杂情况下，使用异步懒加载的方式执行解析，有助于提高性能。</p><p>至此，一次完整的具有依赖的类的实例化就完成了。我们可以通过打印依赖树，清晰地观察到该实例依赖了哪些实例，从而避免了一切可能的循环依赖，与多次构造依赖带来的内存泄露等很多难以排查的问题。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,30),u={href:"https://github.com/inversify/InversifyJS/blob/master/wiki/architecture.md",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",u,[o("InversifyJS Architecture Overview"),c(s)])])])}const b=a(l,[["render",k],["__file","di-framework-life-cycle.html.vue"]]),f=JSON.parse('{"path":"/blogs/vscode-for-web/di-framework-life-cycle.html","title":"浅析依赖注入框架的生命周期(以 InversifyJS 为例)","lang":"en-US","frontmatter":{"title":"浅析依赖注入框架的生命周期(以 InversifyJS 为例)","date":"2023-02-09T17:39:42.000Z","categories":["VSCode For Web 深入浅出"],"tags":["InversifyJS","前端框架","依赖注入"]},"headers":[{"level":2,"title":"InversifyJS 的生命周期","slug":"inversifyjs-的生命周期","link":"#inversifyjs-的生命周期","children":[]},{"level":2,"title":"Annotation 注释阶段","slug":"annotation-注释阶段","link":"#annotation-注释阶段","children":[]},{"level":2,"title":"Planning 规划阶段","slug":"planning-规划阶段","link":"#planning-规划阶段","children":[]},{"level":2,"title":"Resolution 解析执行阶段","slug":"resolution-解析执行阶段","link":"#resolution-解析执行阶段","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1719306814000,"updatedTime":1719306814000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/vscode-for-web/di-framework-life-cycle.md"}');export{b as comp,f as data};
