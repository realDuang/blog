import{_ as o,r as p,o as c,c as l,a as n,d as s,e,b as t}from"./app-DG1e-Jaf.js";const i={},r=t('<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>在上一篇中，我们一起分析了 VS Code 整体的代码架构，了解了 VS Code 是由前后端分离的方式开发的。且无论前端是基于 electron 还是 web，后端是本地还是云端，其调用方式并无不同。</p><p>这样的架构下，前后端的通信方式是如何实现的呢？本篇我们将一起来探究 VS Code For Web 的进程间通信方式。</p></div><h2 id="进程通信与调用方式" tabindex="-1"><a class="header-anchor" href="#进程通信与调用方式"><span>进程通信与调用方式</span></a></h2><h3 id="进程间通信协议" tabindex="-1"><a class="header-anchor" href="#进程间通信协议"><span>进程间通信协议</span></a></h3>',3),u={href:"https://github.com/microsoft/vscode/blob/main/src/vs/base/parts/ipc",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> RequestType <span class="token punctuation">{</span>
    <span class="token builtin">Promise</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
    PromiseCancel <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">,</span>
    EventListen <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">,</span>
    EventDispose <span class="token operator">=</span> <span class="token number">103</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 enum type 可以看出，VSCode 的 IPC 模块同时支持两种调用方式，一种是基于 Promise 的调用实现， 另一种是通过 Event Emitter/Listener 的那一套事件监听机制来实现。</p><p>以事件监听机制为例，VSCode 中采用 <code>vscode-jsonrpc</code> 这个包来封装实现，调用方式如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> cp <span class="token keyword">from</span> <span class="token string">&#39;child_process&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> rpc <span class="token keyword">from</span> <span class="token string">&#39;vscode-jsonrpc/node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> childProcess <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use stdin and stdout for communication:</span>
<span class="token keyword">let</span> connection <span class="token operator">=</span> rpc<span class="token punctuation">.</span><span class="token function">createMessageConnection</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token function">StreamMessageReader</span><span class="token punctuation">(</span>childProcess<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token function">StreamMessageWriter</span><span class="token punctuation">(</span>childProcess<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">NotificationType</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;testNotification&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端调用也采用类似的包装：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> rpc <span class="token keyword">from</span> <span class="token string">&#39;vscode-jsonrpc/node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> connection <span class="token operator">=</span> rpc<span class="token punctuation">.</span><span class="token function">createMessageConnection</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token function">StreamMessageReader</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token function">StreamMessageWriter</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rpc</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">NotificationType</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;testNotification&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This prints Hello World</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

connection<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进程间通信单元" tabindex="-1"><a class="header-anchor" href="#进程间通信单元"><span>进程间通信单元</span></a></h3><p>为了实现客户端与服务端之间的点对点通信，我们需要一个最小单元来实现消息的调用与监听。在 VSCode 中，这个最小单元即为 <code>Channel</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * An \`IChannel\` is an abstraction over a collection of commands.
 * You can \`call\` several commands on a channel, each taking at
 * most one single argument. A \`call\` always returns a promise
 * with at most one single return value.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IChannel</span> <span class="token punctuation">{</span>
    <span class="token generic-function"><span class="token function">call</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> cancellationToken<span class="token operator">?</span><span class="token operator">:</span> CancellationToken<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">listen</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> Event<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次通信过程，需要客户端与服务端处于同一个 <code>Channel</code> 中。</p><h3 id="进程间通信建连" tabindex="-1"><a class="header-anchor" href="#进程间通信建连"><span>进程间通信建连</span></a></h3><p>在 VSCode 中，客户端与服务端之间的通信建立是通过 <code>Connection</code> 类来建立，通过传入客户端与服务端的 <code>Channel</code> ，即 <code>ChannelClient</code> 与 <code>ChannelServer</code> 来实例化连接。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Connection<span class="token operator">&lt;</span>TContext<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Client<span class="token operator">&lt;</span>TContext<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> channelServer<span class="token operator">:</span> ChannelServer<span class="token operator">&lt;</span>TContext<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token keyword">readonly</span> channelClient<span class="token operator">:</span> ChannelClient<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们之间的区别是，由于服务端可以同时对多个客户端服务，因此支持多个 <code>Channel</code> 的获取，而<code>ChannelClient</code> 为一对一连接。</p><p>综上，我们就梳理清楚了 VSCode 中 IPC 模块的基本架构，了解了进程间的通信细节。</p><p>用一张图总结梳理一下知识点：</p><p><img src="https://zakum-1252497671.cos.ap-guangzhou.myqcloud.com/20221010150243.png" alt="20221010150243"></p><p>由于 VSCode 的 IPC 模块天然支持异步能力，因此事实上它并不区分进程是本地进程还是远端进程，只要是通过 <code>Channel</code> 通信的，都可以被认为是进程间通信，都可以复用相同的代码编写。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,19),k={href:"https://github.com/microsoft/vscode/wiki/Source-Code-Organization",target:"_blank",rel:"noopener noreferrer"},m={href:"https://code.visualstudio.com/api/references/vscode-api#TextEditor.setDecorations",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/195472626",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/360106947",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("对于多进程架构的项目，进程之间的通信会通过进程间调用 (Inter Process Calling, IPC)。VSCode 中自己设计了专门的 IPC 模块来实现通信。代码位于 "),n("a",u,[s("src/vs/base/parts/ipc"),e(a)]),s("。")]),d,n("p",null,[n("a",k,[s("VSCode 的官方文档"),e(a)])]),n("p",null,[n("a",m,[s("VSCode API"),e(a)])]),n("p",null,[n("a",v,[s("VSCode 源码解读--IPC 通信机制"),e(a)])]),n("p",null,[n("a",h,[s("vscode 源码解析 - 进程间调用"),e(a)])])])}const w=o(i,[["render",b],["__file","1.inter-process-communication.html.vue"]]),y=JSON.parse('{"path":"/blogs/vscode-for-web/1.inter-process-communication.html","title":"VS Code For Web 深入浅出 -- 进程间通信篇","lang":"en-US","frontmatter":{"title":"VS Code For Web 深入浅出 -- 进程间通信篇","date":"2022-10-20T23:13:52.000Z","categories":["VSCode For Web 深入浅出"],"tags":["VS Code","VS Code For Web"]},"headers":[{"level":2,"title":"进程通信与调用方式","slug":"进程通信与调用方式","link":"#进程通信与调用方式","children":[{"level":3,"title":"进程间通信协议","slug":"进程间通信协议","link":"#进程间通信协议","children":[]},{"level":3,"title":"进程间通信单元","slug":"进程间通信单元","link":"#进程间通信单元","children":[]},{"level":3,"title":"进程间通信建连","slug":"进程间通信建连","link":"#进程间通信建连","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1737617896000,"updatedTime":1737617896000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/vscode-for-web/1.inter-process-communication.md"}');export{w as comp,y as data};
