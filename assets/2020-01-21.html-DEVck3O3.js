import{_ as n,o as s,c as a,b as e}from"./app-B9TWmIeZ.js";const t={},p=e(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>React16.8 迎来了大众期盼已久的函数式编程利器：<code>useHook</code>特性。它能大大增强函数式组件的能力，使得立即执行的、没有生命周期与 state 等等类组件特性的函数式组件拥有相同的能力。</p><p><code>useHook</code>的原理实际上是利用了 JavaScript 的闭包机制，因此在多次执行函数的同时记住一些状态。</p><p><code>useHook</code>拥有多种函数，我们也可以自定义自己的 hook。在这里主要来说说其中最常用的几种，简述他们的大致原理，以及使用时的注意事项。</p></div><h2 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate"><span>useState</span></a></h2><p><code>useState</code>就是为了给纯函数组件加入 class 组件中的 state 能力。它返回一个有两个元素的数组，第一个元素是需要设置的 state 变量，第二个是改变这个变量的 setter 函数。<code>useState</code>的入参决定了返回变量的初始值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>flag<span class="token punctuation">,</span> setFlag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每一次执行 setter 之后，使用了<code>useState</code>的整个函数组件都会被重新执行一次。但是此时<code>useState</code>函数本身并不会被再次执行。这是因为实际上，<code>useState</code>利用了闭包的特性，在闭包内设置了一个私有变量。事实上 setter 改变的值是这个私有变量，我们能取出的变量是这个私有变量的 getter 返回值。</p><p><em>注意，只能在函数的最外层调用 Hook，不能在循环、条件判断或子函数中使用。</em></p><p>这是因为，为了支持在同一个函数组件中使用多次<code>useState</code>，在闭包中，被<code>useState</code>的赋值的私有变量本质上是一个数组类型，通过函数首次被调用的<code>useState</code>的顺序来决定被赋值变量的索引位置，最后 getter 通过索引顺序找到希望取得的变量值。若在循环、条件判断或子函数中使用，则有可能造成函数组件重新执行时顺序与首次执行不一致，这将导致<code>useState</code>的取值混乱。</p><h2 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect"><span>useEffect</span></a></h2><p>useEffect 为纯函数组件提供了 class 组件中的<code>componentDidMount</code>、<code>componentDidUpdate</code>、<code>componentWillUnMount</code>、<code>shouldComponentUpdate</code>这些生命周期能力。</p><p>useEffect 接收两个参数，第一个参数是一个函数，在函数中执行的动作相当于在类组件中生命周期中的所需要进行的工作。该函数的返回值也是一个函数，若不为空的话它执行的时机等同于<code>componentWillUnMount</code>。</p><p>第二个参数是一个数组，传入的是需要监听变量列表，若填写该值，只有当监听范围内的变量更新时，才执行第一个参数函数中的动作。起到了类似<code>shouldComponentUpdate</code>的作用。当传入空数组时相当于不监听任何变量，只在组件生成时执行一遍，等同于<code>componentDidMount</code>。当传入为空值时相当于监听所有变量，等同于<code>componentDidUpdate</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 执行异步操作 */</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">destroySth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 执行 unmount 操作 */</span>
<span class="token punctuation">}</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">fetchSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">detroySth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer"><span>useReducer</span></a></h2><p><code>useReducer</code>事实上与 redux 概念中的<code>reducer</code>十分类似，如果使用过 redux 应该对<code>reducer</code>的概念和定义不会陌生。</p><p>它与<code>useState</code>作用场景相似，也能赋予函数组件设定和处理 state 的能力。通常情况下，它们是可以互换的。</p><p>但是，对于在组件中存在着多个 state 的定义，或者是操作逻辑复杂需要同时更改多个 state，又或者定义的 state 是一个复杂类型，如数组、对象或存在嵌套，使用<code>useReducer</code>会使得 state 声明更加集中，同时操作逻辑更为清晰，代码也能有更好的可读性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一个参数：应用的初始化</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第二个参数：state 的 reducer 处理函数</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;increment&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>initialState<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;decrement&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>initialState<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> initialState
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用法</span>
<span class="token keyword">function</span> <span class="token function">onIncrementClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;increment&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usememo-和-usecallback" tabindex="-1"><a class="header-anchor" href="#usememo-和-usecallback"><span>useMemo 和 useCallback</span></a></h2><p>这两个 API 我拿在一起来说，原因很简单，他们的目标都是一致的，都是缓存结果，只不过<code>useCallback</code>是缓存函数本身，<code>useMemo</code>是缓存函数返回的结果。从这里也可以看出，实际上，<code>useCallback</code>是可以被<code>useMemo</code>通过多包裹一层函数实现的。</p><p>这两个 API 的函数签名与 useEffect 基本一致，因此调用方法区别不大。在用法功能上，他们之间区别最大的一点是，useEffect 是处理副作用的，是在 render 函数执行完后执行的，相当于 class 组件的<code>didMount/didUpdate</code>。而这两个 API 不能处理副作用，必须同步调用，即在哪里调用就在哪里立即执行函数内容，在下一行就能直接使用返回的结果。</p><p>那么，这两个 API 的使用情景是什么呢？答案是性能优化。我们先来看看需要使用<code>useMemo</code>的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">keywordChangeCompute</span><span class="token punctuation">(</span><span class="token parameter">keyword</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 执行一些非常消耗资源的同步操作 */</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">,</span> setKeyword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">keywordChangeCompute</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若不使用<code>useMemo</code>而直接将函数调用写在 render 中的话，当外部组件或者该组件的其他 state 进行频繁的更新时，该组件会不断地多次触发<code>keywordChangeCompute</code>函数，造成不必要的性能损失。而对于使用了<code>useMemo</code>来说，只在<code>keyword</code>变化的时候才会触发一次函数调用，这与<code>useEffect</code>的触发机制是一致的。</p><p>对于<code>useCallback</code>的使用，有一种情况是非常实用的，即该方法会被传给子组件的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> setStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/get/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ChildComponent onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">useCallback</span><span class="token punctuation">(</span>onChange，<span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为父组件在每一次更新的时候都会生成一个全新的<code>onChange</code>函数，而由于<code>status</code>状态不变，新的<code>onChange</code>函数并没有改变，这样会导致子组件进行一次没必要的更新，造成性能损失。而使用了<code>useCallback</code>后，只会在<code>status</code>状态更新时生成新的函数传给子组件，从而减少子组件渲染次数。</p>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2020-01-21.html.vue"]]),d=JSON.parse('{"path":"/blogs/frontend-basics/2020-01-21.html","title":"React16.8 useHook 特性","lang":"en-US","frontmatter":{"title":"React16.8 useHook 特性","date":"2020-01-21T18:19:28.000Z","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[{"level":2,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":2,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":2,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[]},{"level":2,"title":"useMemo 和 useCallback","slug":"usememo-和-usecallback","link":"#usememo-和-usecallback","children":[]}],"git":{"createdTime":1733141773000,"updatedTime":1733141773000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/frontend-basics/2020-01-21.md"}');export{r as comp,d as data};
