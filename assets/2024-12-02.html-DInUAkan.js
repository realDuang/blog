import{_ as t,r as p,o as i,c,a as s,d as n,e as l,b as a}from"./app-B9TWmIeZ.js";const o={},u=a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>一直以来我对八股文一直是深恶痛绝的，总觉得这种东西如空中楼阁，对实际解决工程问题没有任何帮助。并且很多人只从网上搜索面试题答案死记硬背，反而可能由于该题目版本老旧而自己又没有从实际场景中理解，而导致获得了过时的甚至是错误的知识。</p><p>但随着工作的深入，我发现这种观点是有些偏颇的，因为在实际工程中，如果我们自己都不知道这个技术的运行原理，又何谈对它的深入优化呢？这在 AI 辅助工作的时代更是如此，AI 无法回答你提不出来的问题。</p><p>因此，我想新开辟一个板块，就写一些老生常谈的&quot;八股文&quot;, 但是我会尽量从源码层面去理解这些问题，并且尽量做到一通百通，而不是死记硬背。希望这样的方式能够帮助大家更好地理解这些问题。</p><p>这一次，让我们重走西游，踏上取经路的是 React 的 Diff 算法。（注：以下代码实现均基于 React 18.3 版本实现进行）</p><h2 id="react-diff-算法的诞生背景" tabindex="-1"><a class="header-anchor" href="#react-diff-算法的诞生背景"><span>React Diff 算法的诞生背景</span></a></h2><p>要讲透 React Diff，就一定不能只讲 React Diff。我们需要知道 React Diff 算法为什么会被设计出来。</p><p>在 React 之前，我们在操作 DOM 的时候，通常是直接操作 DOM，比如我们要在一个列表中插入一个新的元素，我们会直接在 DOM 中插入一个新的元素。这样的操作会导致浏览器的重排和重绘，性能开销很大。为了解决这个问题，React 引入了 Virtual DOM。</p><p>Virtual DOM 用于描述 UI 树的理想状态，是一个纯粹的 JavaScript 对象。这样一来，React 的更新操作就从 DOM 操作中解放出来，只需要在内存中对一个 JavaScript 对象频繁进行更新即可。当需要更新 UI 时，React 拥有双缓存机制，会通过 Diff 算法比较新旧 Virtual DOM 的差异，算出需要更新的节点，将需要更新的部分一次性更新到真实的 DOM 中。</p><p>这样一来，React 不仅仅大大减少了浏览器的重排和重绘，提高了性能，同时还带来了一个巨大的好处：逻辑抽象层与视图层操作完全分离，为 React 的跨平台开发提供了可能。实际上，包括 React Native 在内的所有跨平台框架，他们在抽象逻辑层的代码，即 Virtual DOM 以及 React Diff 部分（在 React 中称为 React-Reconciler 库），都是与平台无关，完全相同且复用的。</p><h2 id="react-diff-算法执行性能" tabindex="-1"><a class="header-anchor" href="#react-diff-算法执行性能"><span>React Diff 算法执行性能</span></a></h2><p>现在我们知道了 React Diff 算法本质上就是用于比较新旧 Virtual DOM 的差异，得出需要更新的 DOM 行为。显而易见这个算法在整个 React 中的使用频率相当高，因此 React Diff 算法的执行性能是非常重要的。</p><p>我们知道，DOM 节点本质上是一个树型结构，因此通常来说，我们可以通过树的遍历算法来比较新旧 Virtual DOM 的差异。但是，即使在最前沿的算法中，将两棵树完全比对的复杂度仍为 O(n^3) （我们可以在 LeetCode 中很容易找到这样的题型，感兴趣可以自己实现一下），这显然是不可接受的。而 React Diff 算法将这一行为的时间复杂度降低到了 O(n)。</p><p>当然，科学领域里没有银弹，React Diff 能实现这么优异的性能，也是因为设计团队根据 React 本身的特点，预设了比对的 3 个限制：</p><ol><li><strong>只对同级元素 diff</strong>。若同一个 DOM 节点在更新中变更了层级，则 react 不会复用。</li><li><strong>不同类型的元素变更时，元素不会复用</strong>。例如元素从 div 变成 p，react 会销毁 div 和所有子孙节点，并重新建立。</li><li>开发者可以对元素指定 key 属性来表示该元素能在更新后保持稳定，帮助算法优化。</li></ol><p>正是由于 React 只针对同级同类型元素进行比对，所以 React Diff 将不会存在递归与回溯，从而保证了如此优异算法的复杂度。这就是 React Diff 算法的核心，也是八股文中真正有价值的内容，可惜不是每一个熟背的人都能真正理解。</p><h2 id="react-diff-算法的实现" tabindex="-1"><a class="header-anchor" href="#react-diff-算法的实现"><span>React Diff 算法的实现</span></a></h2><p>为了加深理解，我们也可以自己动手根据上述的思路实现 React Diff 算法。</p><p>通过进入 Diff 算法的 React 节点的子节点个数不同，我们可以将 React Diff 算法分为两种情况：单节点 Diff 和多节点 Diff。在实际的使用中，我们可以通过判断节点的 props.children 是否为数组来判断当前节点是单节点还是多节点。</p><h3 id="单节点-diff-reconcilesingleelement" tabindex="-1"><a class="header-anchor" href="#单节点-diff-reconcilesingleelement"><span>单节点 Diff（reconcileSingleElement）</span></a></h3><p>单节点 Diff 是指<strong>新节点只有一个子节点的情况（但旧节点可能有多个 children）</strong>。在这种情况下，我们只需要比较新旧节点的 props 和 children 是否相同即可。若旧的 React 节点可以被复用，将旧的 React 节点生成副本并返回。若旧的 React 节点无法被复用，则新生成一个 React 节点并直接返回，进入下一个节点判断。</p><p>那么我们如何判断旧节点是否能被复用呢？根据上面的限制我们可以得出，若当前元素的元素类型不同，则直接不复用。若相同，则遍历该旧节点的所有 children，判断元素的 key 和 type 与新节点的子元素是否相同。此时有会出现两种情况：</p><p>遍历时找到了子元素的 key 匹配，但此时元素 type 不同，表示该元素类型变更，依据限制 2，不进行复用。此时由于新节点为单 children，因此没有节点会与剩下旧子节点匹配了，直接将旧节点下的所有其他子节点标记为删除，并将新子节点标记为插入。</p><p>遍历时发现 key 不同，则表示该旧子节点不能被复用，将当前节点标记为删除，之后接着遍历后续的其它子节点去寻找是否有 key 匹配的子节点。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>returnFiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span> currentFirstChild<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token operator">:</span> ReactElement<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> elementType <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
        <span class="token comment">// Key 相同，比较 type</span>
        <span class="token class-name"><span class="token keyword">if</span></span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// type 相同 可以复用</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>elementType <span class="token operator">===</span> elementType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当前节点可复用，其他兄弟节点都删除</span>
            <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
            existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>

            <span class="token keyword">return</span> existing<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// key 相同但 type 不同，没法复用。后面的兄弟节点也没有复用的可能性了，都删除</span>
          <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// type 不同，删除旧的，并继续比较</span>
          <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建新节点</span>
    <span class="token keyword">const</span> created <span class="token operator">=</span> <span class="token function">createFiberFromElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    created<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
    <span class="token keyword">return</span> created<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多节点-diff-reconcilechildrenarray" tabindex="-1"><a class="header-anchor" href="#多节点-diff-reconcilechildrenarray"><span>多节点 Diff（reconcileChildrenArray）</span></a></h3><p>多节点 Diff 是指<strong>新节点有多个子节点的情况</strong>。这种情况的处理比较复杂，我们需要将新节点的每个子元素 （即 newChildren 数组） 与旧节点的所有兄弟节点 （即 old.sibling) 相比较，去寻找是否有复用的可能，此时，每一次对 old.sibling 的比较都能简化为，old.sibling 与 newChildren 数组进行 diff，判断逻辑应当与单节点 Diff 类似。</p><ol><li>如果找到可复用元素，则继续遍历其他 newChildren 看是否有可复用。</li><li>如果 key 相同，type 不同，由规则 2，不复用。将旧节点标记删除，新节点标记新增。并继续对其他 newChildren 进行遍历。</li><li>如果 key 不同导致的不可复用，此时说明该节点位置变更，立即跳出遍历循环，在接下来的逻辑中处理。</li><li>如果 newChildren 或者旧 oldfiber.sibling 任意一个遍历完，此时可能有新增新节点，删除旧节点和没有节点变更三种可能，也在接下来的逻辑中处理</li></ol><p>在这一轮的比较结束后，我们可以来查看并判断一下 newChildren 和 old.sibling 的状态。</p><ol><li>如果两者都遍历完毕，那说明已经完成所有子节点的比对，Diff 环节结束。</li><li>如果 newChildren 遍历完毕，但 old.sibling 还有剩余节点，说明这些剩余节点都是需要删除的。</li><li>如果 old.sibling 遍历完毕，但 newChildren 还有剩余节点，说明这些剩余节点都是新增节点，需要创建并插入。</li><li>如果两者都没有遍历完毕，说明此时是由上一轮的条件 3 跳出循环的，说明此时有节点改变了位置。</li></ol><p>这种情况比较复杂，也是 diff 算法处理的精髓所在。可以将剩下的 old.sibling 保存为 map，判断剩余的 newChildren 的 key 是否在 old 节点中存在。若存在则找变更位置，判断 oldIndex 与 lastPlacedIndex 的大小，lastPlacedIndex 初始为 0，若 oldIndex &gt;= lastPlacedIndex，则节点不需要移动，将 lastPlacedIndex = oldIndex，否则将当前节点标记为向右移动。</p><p>通过这个实现我们也可以看出来，React Diff 在判断节点是否移动时，是通过从前往后遍历判断移动位置的。因此，从性能优化的角度考虑，我们要尽量减少将节点从后面移动到前面的操作。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 若 newChildren 为数组，则需要遍历比较来更新当前 Fiber 树</span>
<span class="token comment">// 注：该算法不能通过头尾两侧遍历来优化，因为 Fiber 树是单链表结构</span>
<span class="token keyword">function</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>
  returnFiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  currentFirstChild<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  newChildren<span class="token operator">:</span> <span class="token punctuation">(</span>ReactElement <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> resultingFirstChild<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> previousNewFiber<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// 旧 Fiber 列表</span>
  <span class="token keyword">let</span> oldFiber <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>
  <span class="token keyword">let</span> nextOldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// !!! 重要变量。遍历到的最后一个可复用 fiber 在旧节点中的索引位置</span>
  <span class="token keyword">let</span> lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// 指向当前新节点的索引位置</span>
  <span class="token keyword">let</span> newIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 多节点 Diff 第一次遍历所有旧的和新的子节点，找到需要更新的节点，设置更新标记</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> oldFiber <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber<span class="token punctuation">.</span>index <span class="token operator">&gt;</span> newIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">;</span>
      oldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取最新的 fiber 节点</span>
    <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateSlot</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果此时新旧节点都已经遍历完毕，则直接跳出循环</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldFiber <span class="token operator">=</span> nextOldFiber<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 标记该节点的插入状态，并返回标记顺序</span>
    lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果是第一个新子节点，设置 resultingFirstChild，否则将其作为上一个新子节点的兄弟节点。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>

    oldFiber <span class="token operator">=</span> nextOldFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 情况 1：如果新 children 列表已经遍历完成，但旧 children 列表还有剩余节点，删除这些旧的剩余节点，返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newIdx <span class="token operator">===</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 情况 2：旧节点已经遍历完，但还剩余新节点，说明剩余的新节点都是新增节点，直接创建并插入</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">createChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 如果是第一个新子节点，设置 resultingFirstChild，否则将其作为上一个新子节点的兄弟节点。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 情况 3：新旧节点都没遍历完，需要进行 Diff 操作</span>
  <span class="token comment">// 设立一个 map 用于存储所有旧节点，方便后续查找</span>
  <span class="token keyword">const</span> existingChildren <span class="token operator">=</span> <span class="token function">mapRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 继续遍历剩余的新 fiber 节点，并利用 map，判断新节点为新增节点还是原有旧节点的移动导致。</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span>
      existingChildren<span class="token punctuation">,</span>
      returnFiber<span class="token punctuation">,</span>
      newIdx<span class="token punctuation">,</span>
      newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将新节点插入，并返回标记顺序</span>
      lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 如果是第一个新子节点，设置 resultingFirstChild，否则将其作为上一个新子节点的兄弟节点。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此我们就已经完全理解并实现了 React Diff 算法的核心逻辑。</p>`,34),r={href:"https://github.com/facebook/react/blob/v18.3.0/packages/react-reconciler/src/ReactChildFiber.new.js",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="利用-react-diff-特性优化性能" tabindex="-1"><a class="header-anchor" href="#利用-react-diff-特性优化性能"><span>利用 React Diff 特性优化性能</span></a></h2><p>在进行上面对于实现逻辑的理解中，我们对 React 的底层运行逻辑也有了更深的了解，从而也能更好的触类旁通理解一些 React 的一些性能优化技巧。</p><p>例如，我们耳熟能详的如下这些&quot;React 开发最佳实践&quot;，其实都是基于 React Diff 算法的特性而演化出来的。</p><h3 id="避免使用-index-作为-key" tabindex="-1"><a class="header-anchor" href="#避免使用-index-作为-key"><span>避免使用 index 作为 key</span></a></h3><p>这是由于在 React Diff 中，key 是用来判断节点是否可以复用的重要依据。如果我们使用 index 作为 key，那么在节点的插入和删除时，会导致节点的 key 发生变化，从而导致 React Diff 算法无法正确判断节点是否可以复用，从而会触发不必要的重渲染，导致性能下降。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// good</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> itemsArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> itemsArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对复杂组件树进行结构拆分" tabindex="-1"><a class="header-anchor" href="#对复杂组件树进行结构拆分"><span>对复杂组件树进行结构拆分</span></a></h3><p>在 React Diff 算法中，只有同级同类型的节点才会进行比对。因此，如果我们的组件树结构过于复杂，会导致 React Diff 算法的比对过程变得复杂，从而影响性能。因此，这也是为什么 React 推崇组件封装与拆分，将同级同类型的节点提取出来，从而减少 React Diff 算法的比对复杂度，提高性能。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 将大型组件拆分为更小的子组件</span>
<span class="token keyword">function</span> <span class="token function">LargeComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Content</span></span> <span class="token attr-name">items</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>items<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Footer</span></span> <span class="token attr-name">info</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>info<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="避免不必要的重渲染" tabindex="-1"><a class="header-anchor" href="#避免不必要的重渲染"><span>避免不必要的重渲染</span></a></h3><p>在 React Diff 算法中，只有节点的 props 或者 children 发生变化时，才会触发节点的重渲染。因此，我们应该尽可能地保证，当组件在不需要变化时，避免因为传入组件的 props 改变而导致不必要的重渲染。</p><p>例如我们可以使用 useMemo (React.memo) 或 useCallback 来避免触发不必要的重渲染。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> nextProps<span class="token punctuation">.</span>value <span class="token operator">===</span> prevProps<span class="token punctuation">.</span>value
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，包括推荐使用不可变的数据结构，避免频繁地进行 setState 操作，通过 CSS 动画来代替 JS 动画等等，都是基于 React Diff 算法的特性，为了减少不必要的 Diff 开销而推荐的性能优化技巧。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>所以你看，从一个 React Diff 是怎么实现的八股文中，我们可以学习并融会贯通这么多个性能优化技巧。这无疑才是我认为的真正有价值的技术技巧。</p><p>很多时候，我们抵制八股文，本质上是在抵制没有任何基础理解的，应试的死记硬背。比如几乎没有运用场景的 ie 兼容性问题，或者是已经被浏览器优化过的 css 渲染问题。而对那些我们时刻都需要使用到的技术架构，我们更需要仔细研究其核心原理，甚至自己动手实现一遍，这样才能更好地理解其运行机制，在实际工作中遇到性能问题时，有很大的帮助。</p>`,17);function k(v,m){const e=p("ExternalLinkIcon");return i(),c("div",null,[u,s("p",null,[n("在 React 中，Diff 算法的实现是在 React-Reconciler 库中的 ReactChildFiber 模块中。我们可以通过 "),s("a",r,[n("阅读源码"),l(e)]),n(" 来了解完整的 React Diff 算法的实现。")]),d])}const f=t(o,[["render",k],["__file","2024-12-02.html.vue"]]),h=JSON.parse('{"path":"/blogs/frontend-basics/2024-12-02.html","title":"一文讲透 React Diff 算法核心","lang":"en-US","frontmatter":{"title":"一文讲透 React Diff 算法核心","date":"2024-12-12T19:58:57.000Z","categories":["前端基础"],"tags":["JavaScript","React"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"React Diff 算法的诞生背景","slug":"react-diff-算法的诞生背景","link":"#react-diff-算法的诞生背景","children":[]},{"level":2,"title":"React Diff 算法执行性能","slug":"react-diff-算法执行性能","link":"#react-diff-算法执行性能","children":[]},{"level":2,"title":"React Diff 算法的实现","slug":"react-diff-算法的实现","link":"#react-diff-算法的实现","children":[{"level":3,"title":"单节点 Diff（reconcileSingleElement）","slug":"单节点-diff-reconcilesingleelement","link":"#单节点-diff-reconcilesingleelement","children":[]},{"level":3,"title":"多节点 Diff（reconcileChildrenArray）","slug":"多节点-diff-reconcilechildrenarray","link":"#多节点-diff-reconcilechildrenarray","children":[]}]},{"level":2,"title":"利用 React Diff 特性优化性能","slug":"利用-react-diff-特性优化性能","link":"#利用-react-diff-特性优化性能","children":[{"level":3,"title":"避免使用 index 作为 key","slug":"避免使用-index-作为-key","link":"#避免使用-index-作为-key","children":[]},{"level":3,"title":"对复杂组件树进行结构拆分","slug":"对复杂组件树进行结构拆分","link":"#对复杂组件树进行结构拆分","children":[]},{"level":3,"title":"避免不必要的重渲染","slug":"避免不必要的重渲染","link":"#避免不必要的重渲染","children":[]}]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1733141773000,"updatedTime":1733141773000,"contributors":[{"name":"Duang Cheng","email":"longcheng@microsoft.com","commits":1}]},"filePathRelative":"blogs/frontend-basics/2024-12-02.md"}');export{f as comp,h as data};
